
temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e74  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08002024  08002024  00012024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020c8  080020c8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080020c8  080020c8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020c8  080020c8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020c8  080020c8  000120c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020cc  080020cc  000120cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080020d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000078  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f0  200000f0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002465  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008d5  00000000  00000000  0002250d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002c0  00000000  00000000  00022de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000258  00000000  00000000  000230a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000038d4  00000000  00000000  00023300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002e36  00000000  00000000  00026bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000bfba  00000000  00000000  00029a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000359c4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001228  00000000  00000000  00035a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800200c 	.word	0x0800200c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	0800200c 	.word	0x0800200c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay>:
#define MY_ADDR 0x61;

#define SLAVE_ADDR  0x68

void delay(void)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e002      	b.n	80002a2 <delay+0x12>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	3301      	adds	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <delay+0x28>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d9f8      	bls.n	800029c <delay+0xc>
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	0003d08f 	.word	0x0003d08f

080002bc <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80002c2:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <I2C1_GPIOInits+0x40>)
 80002c4:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002c6:	2302      	movs	r3, #2
 80002c8:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80002ca:	2301      	movs	r3, #1
 80002cc:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80002ce:	2301      	movs	r3, #1
 80002d0:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80002d2:	2304      	movs	r3, #4
 80002d4:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002d6:	2302      	movs	r3, #2
 80002d8:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80002da:	2306      	movs	r3, #6
 80002dc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 f91b 	bl	800051c <GPIO_Init>


	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80002e6:	2307      	movs	r3, #7
 80002e8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 f915 	bl	800051c <GPIO_Init>


}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40020400 	.word	0x40020400

08000300 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <I2C1_Inits+0x2c>)
 8000306:	4a0a      	ldr	r2, [pc, #40]	; (8000330 <I2C1_Inits+0x30>)
 8000308:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <I2C1_Inits+0x2c>)
 800030c:	2201      	movs	r2, #1
 800030e:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <I2C1_Inits+0x2c>)
 8000312:	2261      	movs	r2, #97	; 0x61
 8000314:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000316:	4b05      	ldr	r3, [pc, #20]	; (800032c <I2C1_Inits+0x2c>)
 8000318:	2200      	movs	r2, #0
 800031a:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 800031c:	4b03      	ldr	r3, [pc, #12]	; (800032c <I2C1_Inits+0x2c>)
 800031e:	4a05      	ldr	r2, [pc, #20]	; (8000334 <I2C1_Inits+0x34>)
 8000320:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000322:	4802      	ldr	r0, [pc, #8]	; (800032c <I2C1_Inits+0x2c>)
 8000324:	f000 fb84 	bl	8000a30 <I2C_Init>

}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000094 	.word	0x20000094
 8000330:	40005400 	.word	0x40005400
 8000334:	000186a0 	.word	0x000186a0

08000338 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 800033e:	4b09      	ldr	r3, [pc, #36]	; (8000364 <GPIO_ButtonInit+0x2c>)
 8000340:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000342:	2300      	movs	r3, #0
 8000344:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000346:	2300      	movs	r3, #0
 8000348:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800034a:	2302      	movs	r3, #2
 800034c:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800034e:	2300      	movs	r3, #0
 8000350:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4618      	mov	r0, r3
 8000356:	f000 f8e1 	bl	800051c <GPIO_Init>

}
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40020000 	.word	0x40020000

08000368 <main>:


int main(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af02      	add	r7, sp, #8

	//initialise_monitor_handles();

	//printf("Application is running\n");

	GPIO_ButtonInit();
 800036e:	f7ff ffe3 	bl	8000338 <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 8000372:	f7ff ffa3 	bl	80002bc <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 8000376:	f7ff ffc3 	bl	8000300 <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);
 800037a:	2101      	movs	r1, #1
 800037c:	481f      	ldr	r0, [pc, #124]	; (80003fc <main+0x94>)
 800037e:	f000 fb02 	bl	8000986 <I2C_PeripheralControl>

	//ack bit is made 1 after PE=1
	I2C_ManageAcking(I2C1,I2C_ACK_ENABLE);
 8000382:	2101      	movs	r1, #1
 8000384:	481d      	ldr	r0, [pc, #116]	; (80003fc <main+0x94>)
 8000386:	f000 fd0e 	bl	8000da6 <I2C_ManageAcking>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 800038a:	bf00      	nop
 800038c:	2100      	movs	r1, #0
 800038e:	481c      	ldr	r0, [pc, #112]	; (8000400 <main+0x98>)
 8000390:	f000 fa60 	bl	8000854 <GPIO_ReadFromInputPin>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d0f8      	beq.n	800038c <main+0x24>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 800039a:	f7ff ff79 	bl	8000290 <delay>

		commandcode = 0x51;
 800039e:	2351      	movs	r3, #81	; 0x51
 80003a0:	71fb      	strb	r3, [r7, #7]

		I2C_MasterSendData(&I2C1Handle,&commandcode,1,SLAVE_ADDR,I2C_ENABLE_SR);
 80003a2:	1df9      	adds	r1, r7, #7
 80003a4:	2301      	movs	r3, #1
 80003a6:	9300      	str	r3, [sp, #0]
 80003a8:	2368      	movs	r3, #104	; 0x68
 80003aa:	2201      	movs	r2, #1
 80003ac:	4815      	ldr	r0, [pc, #84]	; (8000404 <main+0x9c>)
 80003ae:	f000 fc05 	bl	8000bbc <I2C_MasterSendData>

		I2C_MasterReceiveData(&I2C1Handle,&len,1,SLAVE_ADDR,I2C_ENABLE_SR);
 80003b2:	1db9      	adds	r1, r7, #6
 80003b4:	2301      	movs	r3, #1
 80003b6:	9300      	str	r3, [sp, #0]
 80003b8:	2368      	movs	r3, #104	; 0x68
 80003ba:	2201      	movs	r2, #1
 80003bc:	4811      	ldr	r0, [pc, #68]	; (8000404 <main+0x9c>)
 80003be:	f000 fc60 	bl	8000c82 <I2C_MasterReceiveData>

		commandcode = 0x52;
 80003c2:	2352      	movs	r3, #82	; 0x52
 80003c4:	71fb      	strb	r3, [r7, #7]
		I2C_MasterSendData(&I2C1Handle,&commandcode,1,SLAVE_ADDR,I2C_ENABLE_SR);
 80003c6:	1df9      	adds	r1, r7, #7
 80003c8:	2301      	movs	r3, #1
 80003ca:	9300      	str	r3, [sp, #0]
 80003cc:	2368      	movs	r3, #104	; 0x68
 80003ce:	2201      	movs	r2, #1
 80003d0:	480c      	ldr	r0, [pc, #48]	; (8000404 <main+0x9c>)
 80003d2:	f000 fbf3 	bl	8000bbc <I2C_MasterSendData>


		I2C_MasterReceiveData(&I2C1Handle,rcv_buf,len,SLAVE_ADDR,I2C_DISABLE_SR);
 80003d6:	79ba      	ldrb	r2, [r7, #6]
 80003d8:	2300      	movs	r3, #0
 80003da:	9300      	str	r3, [sp, #0]
 80003dc:	2368      	movs	r3, #104	; 0x68
 80003de:	490a      	ldr	r1, [pc, #40]	; (8000408 <main+0xa0>)
 80003e0:	4808      	ldr	r0, [pc, #32]	; (8000404 <main+0x9c>)
 80003e2:	f000 fc4e 	bl	8000c82 <I2C_MasterReceiveData>

		rcv_buf[len+1] = '\0';
 80003e6:	79bb      	ldrb	r3, [r7, #6]
 80003e8:	3301      	adds	r3, #1
 80003ea:	4a07      	ldr	r2, [pc, #28]	; (8000408 <main+0xa0>)
 80003ec:	2100      	movs	r1, #0
 80003ee:	54d1      	strb	r1, [r2, r3]

		printf("Data : %s",rcv_buf);
 80003f0:	4905      	ldr	r1, [pc, #20]	; (8000408 <main+0xa0>)
 80003f2:	4806      	ldr	r0, [pc, #24]	; (800040c <main+0xa4>)
 80003f4:	f000 fe7c 	bl	80010f0 <iprintf>
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80003f8:	e7c7      	b.n	800038a <main+0x22>
 80003fa:	bf00      	nop
 80003fc:	40005400 	.word	0x40005400
 8000400:	40020000 	.word	0x40020000
 8000404:	20000094 	.word	0x20000094
 8000408:	200000bc 	.word	0x200000bc
 800040c:	08002024 	.word	0x08002024

08000410 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	460b      	mov	r3, r1
 800041a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800041c:	78fb      	ldrb	r3, [r7, #3]
 800041e:	2b01      	cmp	r3, #1
 8000420:	d161      	bne.n	80004e6 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a33      	ldr	r2, [pc, #204]	; (80004f4 <GPIO_PeriClockControl+0xe4>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d106      	bne.n	8000438 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800042a:	4b33      	ldr	r3, [pc, #204]	; (80004f8 <GPIO_PeriClockControl+0xe8>)
 800042c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042e:	4a32      	ldr	r2, [pc, #200]	; (80004f8 <GPIO_PeriClockControl+0xe8>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//TODO
	}

}
 8000436:	e056      	b.n	80004e6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4a30      	ldr	r2, [pc, #192]	; (80004fc <GPIO_PeriClockControl+0xec>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d106      	bne.n	800044e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000440:	4b2d      	ldr	r3, [pc, #180]	; (80004f8 <GPIO_PeriClockControl+0xe8>)
 8000442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000444:	4a2c      	ldr	r2, [pc, #176]	; (80004f8 <GPIO_PeriClockControl+0xe8>)
 8000446:	f043 0302 	orr.w	r3, r3, #2
 800044a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044c:	e04b      	b.n	80004e6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a2b      	ldr	r2, [pc, #172]	; (8000500 <GPIO_PeriClockControl+0xf0>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d106      	bne.n	8000464 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000456:	4b28      	ldr	r3, [pc, #160]	; (80004f8 <GPIO_PeriClockControl+0xe8>)
 8000458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045a:	4a27      	ldr	r2, [pc, #156]	; (80004f8 <GPIO_PeriClockControl+0xe8>)
 800045c:	f043 0304 	orr.w	r3, r3, #4
 8000460:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000462:	e040      	b.n	80004e6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4a27      	ldr	r2, [pc, #156]	; (8000504 <GPIO_PeriClockControl+0xf4>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d106      	bne.n	800047a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800046c:	4b22      	ldr	r3, [pc, #136]	; (80004f8 <GPIO_PeriClockControl+0xe8>)
 800046e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000470:	4a21      	ldr	r2, [pc, #132]	; (80004f8 <GPIO_PeriClockControl+0xe8>)
 8000472:	f043 0308 	orr.w	r3, r3, #8
 8000476:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000478:	e035      	b.n	80004e6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a22      	ldr	r2, [pc, #136]	; (8000508 <GPIO_PeriClockControl+0xf8>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d106      	bne.n	8000490 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000482:	4b1d      	ldr	r3, [pc, #116]	; (80004f8 <GPIO_PeriClockControl+0xe8>)
 8000484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000486:	4a1c      	ldr	r2, [pc, #112]	; (80004f8 <GPIO_PeriClockControl+0xe8>)
 8000488:	f043 0310 	orr.w	r3, r3, #16
 800048c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048e:	e02a      	b.n	80004e6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4a1e      	ldr	r2, [pc, #120]	; (800050c <GPIO_PeriClockControl+0xfc>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d106      	bne.n	80004a6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000498:	4b17      	ldr	r3, [pc, #92]	; (80004f8 <GPIO_PeriClockControl+0xe8>)
 800049a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049c:	4a16      	ldr	r2, [pc, #88]	; (80004f8 <GPIO_PeriClockControl+0xe8>)
 800049e:	f043 0320 	orr.w	r3, r3, #32
 80004a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a4:	e01f      	b.n	80004e6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4a19      	ldr	r2, [pc, #100]	; (8000510 <GPIO_PeriClockControl+0x100>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d106      	bne.n	80004bc <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80004ae:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <GPIO_PeriClockControl+0xe8>)
 80004b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b2:	4a11      	ldr	r2, [pc, #68]	; (80004f8 <GPIO_PeriClockControl+0xe8>)
 80004b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ba:	e014      	b.n	80004e6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a15      	ldr	r2, [pc, #84]	; (8000514 <GPIO_PeriClockControl+0x104>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d106      	bne.n	80004d2 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <GPIO_PeriClockControl+0xe8>)
 80004c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c8:	4a0b      	ldr	r2, [pc, #44]	; (80004f8 <GPIO_PeriClockControl+0xe8>)
 80004ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d0:	e009      	b.n	80004e6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4a10      	ldr	r2, [pc, #64]	; (8000518 <GPIO_PeriClockControl+0x108>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d105      	bne.n	80004e6 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 80004da:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <GPIO_PeriClockControl+0xe8>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <GPIO_PeriClockControl+0xe8>)
 80004e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	40020000 	.word	0x40020000
 80004f8:	40023800 	.word	0x40023800
 80004fc:	40020400 	.word	0x40020400
 8000500:	40020800 	.word	0x40020800
 8000504:	40020c00 	.word	0x40020c00
 8000508:	40021000 	.word	0x40021000
 800050c:	40021400 	.word	0x40021400
 8000510:	40021800 	.word	0x40021800
 8000514:	40021c00 	.word	0x40021c00
 8000518:	40022000 	.word	0x40022000

0800051c <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000524:	2300      	movs	r3, #0
 8000526:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2101      	movs	r1, #1
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff ff6e 	bl	8000410 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	795b      	ldrb	r3, [r3, #5]
 8000538:	2b03      	cmp	r3, #3
 800053a:	d820      	bhi.n	800057e <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	795b      	ldrb	r3, [r3, #5]
 8000540:	461a      	mov	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	791b      	ldrb	r3, [r3, #4]
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	fa02 f303 	lsl.w	r3, r2, r3
 800054c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	791b      	ldrb	r3, [r3, #4]
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	2103      	movs	r1, #3
 800055c:	fa01 f303 	lsl.w	r3, r1, r3
 8000560:	43db      	mvns	r3, r3
 8000562:	4619      	mov	r1, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	400a      	ands	r2, r1
 800056a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	6819      	ldr	r1, [r3, #0]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	697a      	ldr	r2, [r7, #20]
 8000578:	430a      	orrs	r2, r1
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	e0cb      	b.n	8000716 <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	795b      	ldrb	r3, [r3, #5]
 8000582:	2b04      	cmp	r3, #4
 8000584:	d117      	bne.n	80005b6 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000586:	4b4b      	ldr	r3, [pc, #300]	; (80006b4 <GPIO_Init+0x198>)
 8000588:	68db      	ldr	r3, [r3, #12]
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	7912      	ldrb	r2, [r2, #4]
 800058e:	4611      	mov	r1, r2
 8000590:	2201      	movs	r2, #1
 8000592:	408a      	lsls	r2, r1
 8000594:	4611      	mov	r1, r2
 8000596:	4a47      	ldr	r2, [pc, #284]	; (80006b4 <GPIO_Init+0x198>)
 8000598:	430b      	orrs	r3, r1
 800059a:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800059c:	4b45      	ldr	r3, [pc, #276]	; (80006b4 <GPIO_Init+0x198>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	7912      	ldrb	r2, [r2, #4]
 80005a4:	4611      	mov	r1, r2
 80005a6:	2201      	movs	r2, #1
 80005a8:	408a      	lsls	r2, r1
 80005aa:	43d2      	mvns	r2, r2
 80005ac:	4611      	mov	r1, r2
 80005ae:	4a41      	ldr	r2, [pc, #260]	; (80006b4 <GPIO_Init+0x198>)
 80005b0:	400b      	ands	r3, r1
 80005b2:	6093      	str	r3, [r2, #8]
 80005b4:	e035      	b.n	8000622 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	795b      	ldrb	r3, [r3, #5]
 80005ba:	2b05      	cmp	r3, #5
 80005bc:	d117      	bne.n	80005ee <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005be:	4b3d      	ldr	r3, [pc, #244]	; (80006b4 <GPIO_Init+0x198>)
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	7912      	ldrb	r2, [r2, #4]
 80005c6:	4611      	mov	r1, r2
 80005c8:	2201      	movs	r2, #1
 80005ca:	408a      	lsls	r2, r1
 80005cc:	4611      	mov	r1, r2
 80005ce:	4a39      	ldr	r2, [pc, #228]	; (80006b4 <GPIO_Init+0x198>)
 80005d0:	430b      	orrs	r3, r1
 80005d2:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d4:	4b37      	ldr	r3, [pc, #220]	; (80006b4 <GPIO_Init+0x198>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	7912      	ldrb	r2, [r2, #4]
 80005dc:	4611      	mov	r1, r2
 80005de:	2201      	movs	r2, #1
 80005e0:	408a      	lsls	r2, r1
 80005e2:	43d2      	mvns	r2, r2
 80005e4:	4611      	mov	r1, r2
 80005e6:	4a33      	ldr	r2, [pc, #204]	; (80006b4 <GPIO_Init+0x198>)
 80005e8:	400b      	ands	r3, r1
 80005ea:	60d3      	str	r3, [r2, #12]
 80005ec:	e019      	b.n	8000622 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	795b      	ldrb	r3, [r3, #5]
 80005f2:	2b06      	cmp	r3, #6
 80005f4:	d115      	bne.n	8000622 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f6:	4b2f      	ldr	r3, [pc, #188]	; (80006b4 <GPIO_Init+0x198>)
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	7912      	ldrb	r2, [r2, #4]
 80005fe:	4611      	mov	r1, r2
 8000600:	2201      	movs	r2, #1
 8000602:	408a      	lsls	r2, r1
 8000604:	4611      	mov	r1, r2
 8000606:	4a2b      	ldr	r2, [pc, #172]	; (80006b4 <GPIO_Init+0x198>)
 8000608:	430b      	orrs	r3, r1
 800060a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <GPIO_Init+0x198>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	7912      	ldrb	r2, [r2, #4]
 8000614:	4611      	mov	r1, r2
 8000616:	2201      	movs	r2, #1
 8000618:	408a      	lsls	r2, r1
 800061a:	4611      	mov	r1, r2
 800061c:	4a25      	ldr	r2, [pc, #148]	; (80006b4 <GPIO_Init+0x198>)
 800061e:	430b      	orrs	r3, r1
 8000620:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	791b      	ldrb	r3, [r3, #4]
 8000626:	089b      	lsrs	r3, r3, #2
 8000628:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	791b      	ldrb	r3, [r3, #4]
 800062e:	f003 0303 	and.w	r3, r3, #3
 8000632:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a1f      	ldr	r2, [pc, #124]	; (80006b8 <GPIO_Init+0x19c>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d04e      	beq.n	80006dc <GPIO_Init+0x1c0>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a1e      	ldr	r2, [pc, #120]	; (80006bc <GPIO_Init+0x1a0>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d032      	beq.n	80006ae <GPIO_Init+0x192>
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a1c      	ldr	r2, [pc, #112]	; (80006c0 <GPIO_Init+0x1a4>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d02b      	beq.n	80006aa <GPIO_Init+0x18e>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a1b      	ldr	r2, [pc, #108]	; (80006c4 <GPIO_Init+0x1a8>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d024      	beq.n	80006a6 <GPIO_Init+0x18a>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a19      	ldr	r2, [pc, #100]	; (80006c8 <GPIO_Init+0x1ac>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d01d      	beq.n	80006a2 <GPIO_Init+0x186>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a18      	ldr	r2, [pc, #96]	; (80006cc <GPIO_Init+0x1b0>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d016      	beq.n	800069e <GPIO_Init+0x182>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a16      	ldr	r2, [pc, #88]	; (80006d0 <GPIO_Init+0x1b4>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d00f      	beq.n	800069a <GPIO_Init+0x17e>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a15      	ldr	r2, [pc, #84]	; (80006d4 <GPIO_Init+0x1b8>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d008      	beq.n	8000696 <GPIO_Init+0x17a>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a13      	ldr	r2, [pc, #76]	; (80006d8 <GPIO_Init+0x1bc>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d101      	bne.n	8000692 <GPIO_Init+0x176>
 800068e:	2308      	movs	r3, #8
 8000690:	e025      	b.n	80006de <GPIO_Init+0x1c2>
 8000692:	2300      	movs	r3, #0
 8000694:	e023      	b.n	80006de <GPIO_Init+0x1c2>
 8000696:	2307      	movs	r3, #7
 8000698:	e021      	b.n	80006de <GPIO_Init+0x1c2>
 800069a:	2306      	movs	r3, #6
 800069c:	e01f      	b.n	80006de <GPIO_Init+0x1c2>
 800069e:	2305      	movs	r3, #5
 80006a0:	e01d      	b.n	80006de <GPIO_Init+0x1c2>
 80006a2:	2304      	movs	r3, #4
 80006a4:	e01b      	b.n	80006de <GPIO_Init+0x1c2>
 80006a6:	2303      	movs	r3, #3
 80006a8:	e019      	b.n	80006de <GPIO_Init+0x1c2>
 80006aa:	2302      	movs	r3, #2
 80006ac:	e017      	b.n	80006de <GPIO_Init+0x1c2>
 80006ae:	2301      	movs	r3, #1
 80006b0:	e015      	b.n	80006de <GPIO_Init+0x1c2>
 80006b2:	bf00      	nop
 80006b4:	40013c00 	.word	0x40013c00
 80006b8:	40020000 	.word	0x40020000
 80006bc:	40020400 	.word	0x40020400
 80006c0:	40020800 	.word	0x40020800
 80006c4:	40020c00 	.word	0x40020c00
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40021400 	.word	0x40021400
 80006d0:	40021800 	.word	0x40021800
 80006d4:	40021c00 	.word	0x40021c00
 80006d8:	40022000 	.word	0x40022000
 80006dc:	2300      	movs	r3, #0
 80006de:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80006e0:	4b59      	ldr	r3, [pc, #356]	; (8000848 <GPIO_Init+0x32c>)
 80006e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e4:	4a58      	ldr	r2, [pc, #352]	; (8000848 <GPIO_Init+0x32c>)
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ea:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80006ec:	7c7a      	ldrb	r2, [r7, #17]
 80006ee:	7cbb      	ldrb	r3, [r7, #18]
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	fa02 f103 	lsl.w	r1, r2, r3
 80006f6:	4a55      	ldr	r2, [pc, #340]	; (800084c <GPIO_Init+0x330>)
 80006f8:	7cfb      	ldrb	r3, [r7, #19]
 80006fa:	3302      	adds	r3, #2
 80006fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000700:	4b53      	ldr	r3, [pc, #332]	; (8000850 <GPIO_Init+0x334>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	7912      	ldrb	r2, [r2, #4]
 8000708:	4611      	mov	r1, r2
 800070a:	2201      	movs	r2, #1
 800070c:	408a      	lsls	r2, r1
 800070e:	4611      	mov	r1, r2
 8000710:	4a4f      	ldr	r2, [pc, #316]	; (8000850 <GPIO_Init+0x334>)
 8000712:	430b      	orrs	r3, r1
 8000714:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	799b      	ldrb	r3, [r3, #6]
 800071a:	461a      	mov	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	791b      	ldrb	r3, [r3, #4]
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	689a      	ldr	r2, [r3, #8]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	791b      	ldrb	r3, [r3, #4]
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	2103      	movs	r1, #3
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	43db      	mvns	r3, r3
 800073c:	4619      	mov	r1, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	400a      	ands	r2, r1
 8000744:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	6899      	ldr	r1, [r3, #8]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	697a      	ldr	r2, [r7, #20]
 8000752:	430a      	orrs	r2, r1
 8000754:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	79db      	ldrb	r3, [r3, #7]
 800075a:	461a      	mov	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	791b      	ldrb	r3, [r3, #4]
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	fa02 f303 	lsl.w	r3, r2, r3
 8000766:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	68da      	ldr	r2, [r3, #12]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	791b      	ldrb	r3, [r3, #4]
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	2103      	movs	r1, #3
 8000776:	fa01 f303 	lsl.w	r3, r1, r3
 800077a:	43db      	mvns	r3, r3
 800077c:	4619      	mov	r1, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	400a      	ands	r2, r1
 8000784:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	68d9      	ldr	r1, [r3, #12]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	430a      	orrs	r2, r1
 8000794:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	7a1b      	ldrb	r3, [r3, #8]
 800079a:	461a      	mov	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	791b      	ldrb	r3, [r3, #4]
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	685a      	ldr	r2, [r3, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	791b      	ldrb	r3, [r3, #4]
 80007b0:	4619      	mov	r1, r3
 80007b2:	2301      	movs	r3, #1
 80007b4:	408b      	lsls	r3, r1
 80007b6:	43db      	mvns	r3, r3
 80007b8:	4619      	mov	r1, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	400a      	ands	r2, r1
 80007c0:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	6859      	ldr	r1, [r3, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	697a      	ldr	r2, [r7, #20]
 80007ce:	430a      	orrs	r2, r1
 80007d0:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	795b      	ldrb	r3, [r3, #5]
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d131      	bne.n	800083e <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	791b      	ldrb	r3, [r3, #4]
 80007de:	08db      	lsrs	r3, r3, #3
 80007e0:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	791b      	ldrb	r3, [r3, #4]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	7c3a      	ldrb	r2, [r7, #16]
 80007f2:	3208      	adds	r2, #8
 80007f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	220f      	movs	r2, #15
 80007fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000802:	43db      	mvns	r3, r3
 8000804:	4618      	mov	r0, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	7c3a      	ldrb	r2, [r7, #16]
 800080c:	4001      	ands	r1, r0
 800080e:	3208      	adds	r2, #8
 8000810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	7c3a      	ldrb	r2, [r7, #16]
 800081a:	3208      	adds	r2, #8
 800081c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	7a5b      	ldrb	r3, [r3, #9]
 8000824:	461a      	mov	r2, r3
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	4618      	mov	r0, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	7c3a      	ldrb	r2, [r7, #16]
 8000836:	4301      	orrs	r1, r0
 8000838:	3208      	adds	r2, #8
 800083a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 800083e:	bf00      	nop
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40013800 	.word	0x40013800
 8000850:	40013c00 	.word	0x40013c00

08000854 <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	460b      	mov	r3, r1
 800085e:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	691a      	ldr	r2, [r3, #16]
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	fa22 f303 	lsr.w	r3, r2, r3
 800086a:	b2db      	uxtb	r3, r3
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	73fb      	strb	r3, [r7, #15]

   return value;
 8000872:	7bfb      	ldrb	r3, [r7, #15]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <I2C_GenerateStartCondition>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	601a      	str	r2, [r3, #0]
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <I2C_ExecuteAddressPhaseWrite>:



static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80008ac:	78fb      	ldrb	r3, [r7, #3]
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 80008b2:	78fb      	ldrb	r3, [r7, #3]
 80008b4:	f023 0301 	bic.w	r3, r3, #1
 80008b8:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80008ba:	78fa      	ldrb	r2, [r7, #3]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	611a      	str	r2, [r3, #16]
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	460b      	mov	r3, r1
 80008d6:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80008d8:	78fb      	ldrb	r3, [r7, #3]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 80008de:	78fb      	ldrb	r3, [r7, #3]
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80008e6:	78fa      	ldrb	r2, [r7, #3]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	611a      	str	r2, [r3, #16]
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	2b00      	cmp	r3, #0
 800090c:	d01f      	beq.n	800094e <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	7f1b      	ldrb	r3, [r3, #28]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d112      	bne.n	800093c <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6a1b      	ldr	r3, [r3, #32]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d11f      	bne.n	800095e <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f000 fa3e 	bl	8000da6 <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	695b      	ldr	r3, [r3, #20]
 8000930:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 800093a:	e010      	b.n	800095e <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	60fb      	str	r3, [r7, #12]
}
 800094c:	e007      	b.n	800095e <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	60fb      	str	r3, [r7, #12]
}
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <I2C_GenerateStopCondition>:


 void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	601a      	str	r2, [r3, #0]
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <I2C_PeripheralControl>:
 *
 * @Note              -

 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	460b      	mov	r3, r1
 8000990:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000992:	78fb      	ldrb	r3, [r7, #3]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d106      	bne.n	80009a6 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f043 0201 	orr.w	r2, r3, #1
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 80009a4:	e005      	b.n	80009b2 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f023 0201 	bic.w	r2, r3, #1
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	601a      	str	r2, [r3, #0]
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <I2C_PeriClockControl>:
 *
 * @Note              -

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d11f      	bne.n	8000a12 <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <I2C_PeriClockControl+0x60>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d106      	bne.n	80009e8 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 80009da:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <I2C_PeriClockControl+0x64>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a11      	ldr	r2, [pc, #68]	; (8000a24 <I2C_PeriClockControl+0x64>)
 80009e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
	else
	{
		//TODO
	}

}
 80009e6:	e014      	b.n	8000a12 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a0f      	ldr	r2, [pc, #60]	; (8000a28 <I2C_PeriClockControl+0x68>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d106      	bne.n	80009fe <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <I2C_PeriClockControl+0x64>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <I2C_PeriClockControl+0x64>)
 80009f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009fa:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009fc:	e009      	b.n	8000a12 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <I2C_PeriClockControl+0x6c>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d105      	bne.n	8000a12 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <I2C_PeriClockControl+0x64>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	4a06      	ldr	r2, [pc, #24]	; (8000a24 <I2C_PeriClockControl+0x64>)
 8000a0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a10:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40005400 	.word	0x40005400
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40005800 	.word	0x40005800
 8000a2c:	40005c00 	.word	0x40005c00

08000a30 <I2C_Init>:
 *
 * @Note              -

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2101      	movs	r1, #1
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ffbc 	bl	80009c0 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	7a5b      	ldrb	r3, [r3, #9]
 8000a4c:	029b      	lsls	r3, r3, #10
 8000a4e:	461a      	mov	r2, r3
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8000a62:	f000 f9bd 	bl	8000de0 <RCC_GetPCLK1Value>
 8000a66:	4603      	mov	r3, r0
 8000a68:	4a47      	ldr	r2, [pc, #284]	; (8000b88 <I2C_Init+0x158>)
 8000a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6e:	0c9b      	lsrs	r3, r3, #18
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a80:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	7a1b      	ldrb	r3, [r3, #8]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9a:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	68fa      	ldr	r2, [r7, #12]
 8000aa2:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	4a36      	ldr	r2, [pc, #216]	; (8000b8c <I2C_Init+0x15c>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d80f      	bhi.n	8000ad6 <I2C_Init+0xa6>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000ab6:	f000 f993 	bl	8000de0 <RCC_GetPCLK1Value>
 8000aba:	4602      	mov	r2, r0
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac6:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000ac8:	897b      	ldrh	r3, [r7, #10]
 8000aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	e02d      	b.n	8000b32 <I2C_Init+0x102>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000adc:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	7a9b      	ldrb	r3, [r3, #10]
 8000ae2:	039b      	lsls	r3, r3, #14
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	7a9b      	ldrb	r3, [r3, #10]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d10b      	bne.n	8000b0c <I2C_Init+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000af4:	f000 f974 	bl	8000de0 <RCC_GetPCLK1Value>
 8000af8:	4601      	mov	r1, r0
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	4613      	mov	r3, r2
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	4413      	add	r3, r2
 8000b04:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b08:	817b      	strh	r3, [r7, #10]
 8000b0a:	e00c      	b.n	8000b26 <I2C_Init+0xf6>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000b0c:	f000 f968 	bl	8000de0 <RCC_GetPCLK1Value>
 8000b10:	4601      	mov	r1, r0
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	685a      	ldr	r2, [r3, #4]
 8000b16:	4613      	mov	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	4413      	add	r3, r2
 8000b1c:	009a      	lsls	r2, r3, #2
 8000b1e:	4413      	add	r3, r2
 8000b20:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b24:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000b26:	897b      	ldrh	r3, [r7, #10]
 8000b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <I2C_Init+0x15c>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d809      	bhi.n	8000b58 <I2C_Init+0x128>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8000b44:	f000 f94c 	bl	8000de0 <RCC_GetPCLK1Value>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	4a0f      	ldr	r2, [pc, #60]	; (8000b88 <I2C_Init+0x158>)
 8000b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b50:	0c9b      	lsrs	r3, r3, #18
 8000b52:	3301      	adds	r3, #1
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	e00d      	b.n	8000b74 <I2C_Init+0x144>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8000b58:	f000 f942 	bl	8000de0 <RCC_GetPCLK1Value>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000b62:	fb02 f303 	mul.w	r3, r2, r3
 8000b66:	0a5b      	lsrs	r3, r3, #9
 8000b68:	4a09      	ldr	r2, [pc, #36]	; (8000b90 <I2C_Init+0x160>)
 8000b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6e:	09db      	lsrs	r3, r3, #7
 8000b70:	3301      	adds	r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000b7e:	621a      	str	r2, [r3, #32]

}
 8000b80:	bf00      	nop
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	431bde83 	.word	0x431bde83
 8000b8c:	000186a0 	.word	0x000186a0
 8000b90:	00044b83 	.word	0x00044b83

08000b94 <I2C_GetFlagStatus>:

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	695a      	ldr	r2, [r3, #20]
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e000      	b.n	8000bb0 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000bae:	2300      	movs	r3, #0
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <I2C_MasterSendData>:



void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
 8000bc8:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fe56 	bl	8000880 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8000bd4:	bf00      	nop
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2101      	movs	r1, #1
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ffd9 	bl	8000b94 <I2C_GetFlagStatus>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d0f6      	beq.n	8000bd6 <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	78fa      	ldrb	r2, [r7, #3]
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fe55 	bl	80008a0 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8000bf6:	bf00      	nop
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ffc8 	bl	8000b94 <I2C_GetFlagStatus>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d0f6      	beq.n	8000bf8 <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8000c0a:	68f8      	ldr	r0, [r7, #12]
 8000c0c:	f7ff fe74 	bl	80008f8 <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0)
 8000c10:	e014      	b.n	8000c3c <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 8000c12:	bf00      	nop
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2180      	movs	r1, #128	; 0x80
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ffba 	bl	8000b94 <I2C_GetFlagStatus>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0f6      	beq.n	8000c14 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	781a      	ldrb	r2, [r3, #0]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	3301      	adds	r3, #1
 8000c34:	60bb      	str	r3, [r7, #8]
		Len--;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d1e7      	bne.n	8000c12 <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );
 8000c42:	bf00      	nop
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2180      	movs	r1, #128	; 0x80
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ffa2 	bl	8000b94 <I2C_GetFlagStatus>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0f6      	beq.n	8000c44 <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );
 8000c56:	bf00      	nop
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2104      	movs	r1, #4
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ff98 	bl	8000b94 <I2C_GetFlagStatus>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d0f6      	beq.n	8000c58 <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 8000c6a:	7e3b      	ldrb	r3, [r7, #24]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d104      	bne.n	8000c7a <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fe76 	bl	8000966 <I2C_GenerateStopCondition>

}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <I2C_MasterReceiveData>:


void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	60f8      	str	r0, [r7, #12]
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	461a      	mov	r2, r3
 8000c90:	460b      	mov	r3, r1
 8000c92:	71fb      	strb	r3, [r7, #7]
 8000c94:	4613      	mov	r3, r2
 8000c96:	71bb      	strb	r3, [r7, #6]

	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fdef 	bl	8000880 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8000ca2:	bf00      	nop
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2101      	movs	r1, #1
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ff72 	bl	8000b94 <I2C_GetFlagStatus>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d0f6      	beq.n	8000ca4 <I2C_MasterReceiveData+0x22>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	79ba      	ldrb	r2, [r7, #6]
 8000cbc:	4611      	mov	r1, r2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fe04 	bl	80008cc <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8000cc4:	bf00      	nop
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2102      	movs	r1, #2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff61 	bl	8000b94 <I2C_GetFlagStatus>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d0f6      	beq.n	8000cc6 <I2C_MasterReceiveData+0x44>


	//procedure to read only 1 byte from slave
	if(Len == 1)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d121      	bne.n	8000d22 <I2C_MasterReceiveData+0xa0>
	{
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 f85e 	bl	8000da6 <I2C_ManageAcking>


		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000cea:	68f8      	ldr	r0, [r7, #12]
 8000cec:	f7ff fe04 	bl	80008f8 <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 8000cf0:	bf00      	nop
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2140      	movs	r1, #64	; 0x40
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff4b 	bl	8000b94 <I2C_GetFlagStatus>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d0f6      	beq.n	8000cf2 <I2C_MasterReceiveData+0x70>

		//generate STOP condition
		if(Sr == I2C_DISABLE_SR )
 8000d04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d104      	bne.n	8000d16 <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fe28 	bl	8000966 <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	701a      	strb	r2, [r3, #0]

	}


    //procedure to read data from slave when Len > 1
	if(Len > 1)
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d930      	bls.n	8000d8a <I2C_MasterReceiveData+0x108>
	{
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000d28:	68f8      	ldr	r0, [r7, #12]
 8000d2a:	f7ff fde5 	bl	80008f8 <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--)
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	e027      	b.n	8000d84 <I2C_MasterReceiveData+0x102>
		{
			//wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 8000d34:	bf00      	nop
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2140      	movs	r1, #64	; 0x40
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff29 	bl	8000b94 <I2C_GetFlagStatus>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d0f6      	beq.n	8000d36 <I2C_MasterReceiveData+0xb4>

			if(i == 2) //if last 2 bytes are remaining
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d10e      	bne.n	8000d6c <I2C_MasterReceiveData+0xea>
			{
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 f826 	bl	8000da6 <I2C_ManageAcking>

				//generate STOP condition
				if(Sr == I2C_DISABLE_SR )
 8000d5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d104      	bne.n	8000d6c <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fdfd 	bl	8000966 <I2C_GenerateStopCondition>

			}

			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	691b      	ldr	r3, [r3, #16]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxBuffer++;
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3b01      	subs	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1d4      	bne.n	8000d34 <I2C_MasterReceiveData+0xb2>
		}

	}

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	7a5b      	ldrb	r3, [r3, #9]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d105      	bne.n	8000d9e <I2C_MasterReceiveData+0x11c>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2101      	movs	r1, #1
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 f804 	bl	8000da6 <I2C_ManageAcking>
	}

}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <I2C_ManageAcking>:


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000da6:	b480      	push	{r7}
 8000da8:	b083      	sub	sp, #12
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
 8000dae:	460b      	mov	r3, r1
 8000db0:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8000db2:	78fb      	ldrb	r3, [r7, #3]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d106      	bne.n	8000dc6 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000dc4:	e005      	b.n	8000dd2 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	601a      	str	r2, [r3, #0]
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000de6:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <RCC_GetPCLK1Value+0x9c>)
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	089b      	lsrs	r3, r3, #2
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	f003 0303 	and.w	r3, r3, #3
 8000df2:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8000df4:	7a7b      	ldrb	r3, [r7, #9]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d102      	bne.n	8000e00 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000dfa:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <RCC_GetPCLK1Value+0xa0>)
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	e00b      	b.n	8000e18 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000e00:	7a7b      	ldrb	r3, [r7, #9]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d102      	bne.n	8000e0c <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <RCC_GetPCLK1Value+0xa4>)
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	e005      	b.n	8000e18 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8000e0c:	7a7b      	ldrb	r3, [r7, #9]
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d102      	bne.n	8000e18 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000e12:	f000 f83d 	bl	8000e90 <RCC_GetPLLOutputClock>
 8000e16:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <RCC_GetPCLK1Value+0x9c>)
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	091b      	lsrs	r3, r3, #4
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	f003 030f 	and.w	r3, r3, #15
 8000e24:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000e26:	7a3b      	ldrb	r3, [r7, #8]
 8000e28:	2b07      	cmp	r3, #7
 8000e2a:	d802      	bhi.n	8000e32 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	72fb      	strb	r3, [r7, #11]
 8000e30:	e005      	b.n	8000e3e <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000e32:	7a3b      	ldrb	r3, [r7, #8]
 8000e34:	3b08      	subs	r3, #8
 8000e36:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <RCC_GetPCLK1Value+0xa8>)
 8000e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e3c:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <RCC_GetPCLK1Value+0x9c>)
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	0a9b      	lsrs	r3, r3, #10
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000e4c:	7a3b      	ldrb	r3, [r7, #8]
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d802      	bhi.n	8000e58 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000e52:	2301      	movs	r3, #1
 8000e54:	72bb      	strb	r3, [r7, #10]
 8000e56:	e004      	b.n	8000e62 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000e58:	7a3b      	ldrb	r3, [r7, #8]
 8000e5a:	3b04      	subs	r3, #4
 8000e5c:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <RCC_GetPCLK1Value+0xac>)
 8000e5e:	5cd3      	ldrb	r3, [r2, r3]
 8000e60:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8000e62:	7afb      	ldrb	r3, [r7, #11]
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e6a:	7abb      	ldrb	r3, [r7, #10]
 8000e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e70:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000e72:	687b      	ldr	r3, [r7, #4]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	00f42400 	.word	0x00f42400
 8000e84:	007a1200 	.word	0x007a1200
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	20000010 	.word	0x20000010

08000e90 <RCC_GetPLLOutputClock>:

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock()
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

	return 0;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0      *((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN            *((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
    //Enable TRCENA
    DEMCR |= ( 1 << 24);
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <ITM_SendChar+0x48>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <ITM_SendChar+0x48>)
 8000eb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000eb4:	6013      	str	r3, [r2, #0]

    //enable stimulus port 0
    ITM_TRACE_EN |= ( 1 << 0);
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <ITM_SendChar+0x4c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a0c      	ldr	r2, [pc, #48]	; (8000eec <ITM_SendChar+0x4c>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6013      	str	r3, [r2, #0]

    // read FIFO status in bit [0]:
    while(!(ITM_STIMULUS_PORT0 & 1));
 8000ec2:	bf00      	nop
 8000ec4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d0f8      	beq.n	8000ec4 <ITM_SendChar+0x24>

    //Write to ITM stimulus port0
    ITM_STIMULUS_PORT0 = ch;
 8000ed2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	6013      	str	r3, [r2, #0]
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000edfc 	.word	0xe000edfc
 8000eec:	e0000e00 	.word	0xe0000e00

08000ef0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	e00a      	b.n	8000f18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f02:	f3af 8000 	nop.w
 8000f06:	4601      	mov	r1, r0
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	60ba      	str	r2, [r7, #8]
 8000f0e:	b2ca      	uxtb	r2, r1
 8000f10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	3301      	adds	r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	dbf0      	blt.n	8000f02 <_read+0x12>
	}

return len;
 8000f20:	687b      	ldr	r3, [r7, #4]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	60f8      	str	r0, [r7, #12]
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
 8000f3a:	e009      	b.n	8000f50 <_write+0x26>
	{
        // __io_putchar(*ptr++); // commented out by Klee to implement printf like feature
        ITM_SendChar(*ptr++); // added this instead to use ITM feature
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	1c5a      	adds	r2, r3, #1
 8000f40:	60ba      	str	r2, [r7, #8]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ffab 	bl	8000ea0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	dbf1      	blt.n	8000f3c <_write+0x12>
	}
	return len;
 8000f58:	687b      	ldr	r3, [r7, #4]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <_close>:

int _close(int file)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
	return -1;
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f8a:	605a      	str	r2, [r3, #4]
	return 0;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <_isatty>:

int _isatty(int file)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
	return 1;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
	return 0;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd4:	4a14      	ldr	r2, [pc, #80]	; (8001028 <_sbrk+0x5c>)
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <_sbrk+0x60>)
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d102      	bne.n	8000fee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <_sbrk+0x64>)
 8000fea:	4a12      	ldr	r2, [pc, #72]	; (8001034 <_sbrk+0x68>)
 8000fec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d207      	bcs.n	800100c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ffc:	f000 f846 	bl	800108c <__errno>
 8001000:	4603      	mov	r3, r0
 8001002:	220c      	movs	r2, #12
 8001004:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800100a:	e009      	b.n	8001020 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	4a05      	ldr	r2, [pc, #20]	; (8001030 <_sbrk+0x64>)
 800101c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800101e:	68fb      	ldr	r3, [r7, #12]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20020000 	.word	0x20020000
 800102c:	00000400 	.word	0x00000400
 8001030:	200000dc 	.word	0x200000dc
 8001034:	200000f0 	.word	0x200000f0

08001038 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001038:	480d      	ldr	r0, [pc, #52]	; (8001070 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800103a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800103c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001040:	480c      	ldr	r0, [pc, #48]	; (8001074 <LoopForever+0x6>)
  ldr r1, =_edata
 8001042:	490d      	ldr	r1, [pc, #52]	; (8001078 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001044:	4a0d      	ldr	r2, [pc, #52]	; (800107c <LoopForever+0xe>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001048:	e002      	b.n	8001050 <LoopCopyDataInit>

0800104a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800104c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104e:	3304      	adds	r3, #4

08001050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001054:	d3f9      	bcc.n	800104a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001058:	4c0a      	ldr	r4, [pc, #40]	; (8001084 <LoopForever+0x16>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800105c:	e001      	b.n	8001062 <LoopFillZerobss>

0800105e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001060:	3204      	adds	r2, #4

08001062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001064:	d3fb      	bcc.n	800105e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001066:	f000 f817 	bl	8001098 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800106a:	f7ff f97d 	bl	8000368 <main>

0800106e <LoopForever>:

LoopForever:
    b LoopForever
 800106e:	e7fe      	b.n	800106e <LoopForever>
  ldr   r0, =_estack
 8001070:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001078:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800107c:	080020d0 	.word	0x080020d0
  ldr r2, =_sbss
 8001080:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001084:	200000f0 	.word	0x200000f0

08001088 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC_IRQHandler>
	...

0800108c <__errno>:
 800108c:	4b01      	ldr	r3, [pc, #4]	; (8001094 <__errno+0x8>)
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000014 	.word	0x20000014

08001098 <__libc_init_array>:
 8001098:	b570      	push	{r4, r5, r6, lr}
 800109a:	4d0d      	ldr	r5, [pc, #52]	; (80010d0 <__libc_init_array+0x38>)
 800109c:	4c0d      	ldr	r4, [pc, #52]	; (80010d4 <__libc_init_array+0x3c>)
 800109e:	1b64      	subs	r4, r4, r5
 80010a0:	10a4      	asrs	r4, r4, #2
 80010a2:	2600      	movs	r6, #0
 80010a4:	42a6      	cmp	r6, r4
 80010a6:	d109      	bne.n	80010bc <__libc_init_array+0x24>
 80010a8:	4d0b      	ldr	r5, [pc, #44]	; (80010d8 <__libc_init_array+0x40>)
 80010aa:	4c0c      	ldr	r4, [pc, #48]	; (80010dc <__libc_init_array+0x44>)
 80010ac:	f000 ffae 	bl	800200c <_init>
 80010b0:	1b64      	subs	r4, r4, r5
 80010b2:	10a4      	asrs	r4, r4, #2
 80010b4:	2600      	movs	r6, #0
 80010b6:	42a6      	cmp	r6, r4
 80010b8:	d105      	bne.n	80010c6 <__libc_init_array+0x2e>
 80010ba:	bd70      	pop	{r4, r5, r6, pc}
 80010bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80010c0:	4798      	blx	r3
 80010c2:	3601      	adds	r6, #1
 80010c4:	e7ee      	b.n	80010a4 <__libc_init_array+0xc>
 80010c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80010ca:	4798      	blx	r3
 80010cc:	3601      	adds	r6, #1
 80010ce:	e7f2      	b.n	80010b6 <__libc_init_array+0x1e>
 80010d0:	080020c8 	.word	0x080020c8
 80010d4:	080020c8 	.word	0x080020c8
 80010d8:	080020c8 	.word	0x080020c8
 80010dc:	080020cc 	.word	0x080020cc

080010e0 <memset>:
 80010e0:	4402      	add	r2, r0
 80010e2:	4603      	mov	r3, r0
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d100      	bne.n	80010ea <memset+0xa>
 80010e8:	4770      	bx	lr
 80010ea:	f803 1b01 	strb.w	r1, [r3], #1
 80010ee:	e7f9      	b.n	80010e4 <memset+0x4>

080010f0 <iprintf>:
 80010f0:	b40f      	push	{r0, r1, r2, r3}
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <iprintf+0x2c>)
 80010f4:	b513      	push	{r0, r1, r4, lr}
 80010f6:	681c      	ldr	r4, [r3, #0]
 80010f8:	b124      	cbz	r4, 8001104 <iprintf+0x14>
 80010fa:	69a3      	ldr	r3, [r4, #24]
 80010fc:	b913      	cbnz	r3, 8001104 <iprintf+0x14>
 80010fe:	4620      	mov	r0, r4
 8001100:	f000 f866 	bl	80011d0 <__sinit>
 8001104:	ab05      	add	r3, sp, #20
 8001106:	9a04      	ldr	r2, [sp, #16]
 8001108:	68a1      	ldr	r1, [r4, #8]
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	4620      	mov	r0, r4
 800110e:	f000 f9bd 	bl	800148c <_vfiprintf_r>
 8001112:	b002      	add	sp, #8
 8001114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001118:	b004      	add	sp, #16
 800111a:	4770      	bx	lr
 800111c:	20000014 	.word	0x20000014

08001120 <std>:
 8001120:	2300      	movs	r3, #0
 8001122:	b510      	push	{r4, lr}
 8001124:	4604      	mov	r4, r0
 8001126:	e9c0 3300 	strd	r3, r3, [r0]
 800112a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800112e:	6083      	str	r3, [r0, #8]
 8001130:	8181      	strh	r1, [r0, #12]
 8001132:	6643      	str	r3, [r0, #100]	; 0x64
 8001134:	81c2      	strh	r2, [r0, #14]
 8001136:	6183      	str	r3, [r0, #24]
 8001138:	4619      	mov	r1, r3
 800113a:	2208      	movs	r2, #8
 800113c:	305c      	adds	r0, #92	; 0x5c
 800113e:	f7ff ffcf 	bl	80010e0 <memset>
 8001142:	4b05      	ldr	r3, [pc, #20]	; (8001158 <std+0x38>)
 8001144:	6263      	str	r3, [r4, #36]	; 0x24
 8001146:	4b05      	ldr	r3, [pc, #20]	; (800115c <std+0x3c>)
 8001148:	62a3      	str	r3, [r4, #40]	; 0x28
 800114a:	4b05      	ldr	r3, [pc, #20]	; (8001160 <std+0x40>)
 800114c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800114e:	4b05      	ldr	r3, [pc, #20]	; (8001164 <std+0x44>)
 8001150:	6224      	str	r4, [r4, #32]
 8001152:	6323      	str	r3, [r4, #48]	; 0x30
 8001154:	bd10      	pop	{r4, pc}
 8001156:	bf00      	nop
 8001158:	08001a35 	.word	0x08001a35
 800115c:	08001a57 	.word	0x08001a57
 8001160:	08001a8f 	.word	0x08001a8f
 8001164:	08001ab3 	.word	0x08001ab3

08001168 <_cleanup_r>:
 8001168:	4901      	ldr	r1, [pc, #4]	; (8001170 <_cleanup_r+0x8>)
 800116a:	f000 b8af 	b.w	80012cc <_fwalk_reent>
 800116e:	bf00      	nop
 8001170:	08001d8d 	.word	0x08001d8d

08001174 <__sfmoreglue>:
 8001174:	b570      	push	{r4, r5, r6, lr}
 8001176:	2268      	movs	r2, #104	; 0x68
 8001178:	1e4d      	subs	r5, r1, #1
 800117a:	4355      	muls	r5, r2
 800117c:	460e      	mov	r6, r1
 800117e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001182:	f000 f8e5 	bl	8001350 <_malloc_r>
 8001186:	4604      	mov	r4, r0
 8001188:	b140      	cbz	r0, 800119c <__sfmoreglue+0x28>
 800118a:	2100      	movs	r1, #0
 800118c:	e9c0 1600 	strd	r1, r6, [r0]
 8001190:	300c      	adds	r0, #12
 8001192:	60a0      	str	r0, [r4, #8]
 8001194:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001198:	f7ff ffa2 	bl	80010e0 <memset>
 800119c:	4620      	mov	r0, r4
 800119e:	bd70      	pop	{r4, r5, r6, pc}

080011a0 <__sfp_lock_acquire>:
 80011a0:	4801      	ldr	r0, [pc, #4]	; (80011a8 <__sfp_lock_acquire+0x8>)
 80011a2:	f000 b8b3 	b.w	800130c <__retarget_lock_acquire_recursive>
 80011a6:	bf00      	nop
 80011a8:	200000e1 	.word	0x200000e1

080011ac <__sfp_lock_release>:
 80011ac:	4801      	ldr	r0, [pc, #4]	; (80011b4 <__sfp_lock_release+0x8>)
 80011ae:	f000 b8ae 	b.w	800130e <__retarget_lock_release_recursive>
 80011b2:	bf00      	nop
 80011b4:	200000e1 	.word	0x200000e1

080011b8 <__sinit_lock_acquire>:
 80011b8:	4801      	ldr	r0, [pc, #4]	; (80011c0 <__sinit_lock_acquire+0x8>)
 80011ba:	f000 b8a7 	b.w	800130c <__retarget_lock_acquire_recursive>
 80011be:	bf00      	nop
 80011c0:	200000e2 	.word	0x200000e2

080011c4 <__sinit_lock_release>:
 80011c4:	4801      	ldr	r0, [pc, #4]	; (80011cc <__sinit_lock_release+0x8>)
 80011c6:	f000 b8a2 	b.w	800130e <__retarget_lock_release_recursive>
 80011ca:	bf00      	nop
 80011cc:	200000e2 	.word	0x200000e2

080011d0 <__sinit>:
 80011d0:	b510      	push	{r4, lr}
 80011d2:	4604      	mov	r4, r0
 80011d4:	f7ff fff0 	bl	80011b8 <__sinit_lock_acquire>
 80011d8:	69a3      	ldr	r3, [r4, #24]
 80011da:	b11b      	cbz	r3, 80011e4 <__sinit+0x14>
 80011dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011e0:	f7ff bff0 	b.w	80011c4 <__sinit_lock_release>
 80011e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80011e8:	6523      	str	r3, [r4, #80]	; 0x50
 80011ea:	4b13      	ldr	r3, [pc, #76]	; (8001238 <__sinit+0x68>)
 80011ec:	4a13      	ldr	r2, [pc, #76]	; (800123c <__sinit+0x6c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80011f2:	42a3      	cmp	r3, r4
 80011f4:	bf04      	itt	eq
 80011f6:	2301      	moveq	r3, #1
 80011f8:	61a3      	streq	r3, [r4, #24]
 80011fa:	4620      	mov	r0, r4
 80011fc:	f000 f820 	bl	8001240 <__sfp>
 8001200:	6060      	str	r0, [r4, #4]
 8001202:	4620      	mov	r0, r4
 8001204:	f000 f81c 	bl	8001240 <__sfp>
 8001208:	60a0      	str	r0, [r4, #8]
 800120a:	4620      	mov	r0, r4
 800120c:	f000 f818 	bl	8001240 <__sfp>
 8001210:	2200      	movs	r2, #0
 8001212:	60e0      	str	r0, [r4, #12]
 8001214:	2104      	movs	r1, #4
 8001216:	6860      	ldr	r0, [r4, #4]
 8001218:	f7ff ff82 	bl	8001120 <std>
 800121c:	68a0      	ldr	r0, [r4, #8]
 800121e:	2201      	movs	r2, #1
 8001220:	2109      	movs	r1, #9
 8001222:	f7ff ff7d 	bl	8001120 <std>
 8001226:	68e0      	ldr	r0, [r4, #12]
 8001228:	2202      	movs	r2, #2
 800122a:	2112      	movs	r1, #18
 800122c:	f7ff ff78 	bl	8001120 <std>
 8001230:	2301      	movs	r3, #1
 8001232:	61a3      	str	r3, [r4, #24]
 8001234:	e7d2      	b.n	80011dc <__sinit+0xc>
 8001236:	bf00      	nop
 8001238:	08002030 	.word	0x08002030
 800123c:	08001169 	.word	0x08001169

08001240 <__sfp>:
 8001240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001242:	4607      	mov	r7, r0
 8001244:	f7ff ffac 	bl	80011a0 <__sfp_lock_acquire>
 8001248:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <__sfp+0x84>)
 800124a:	681e      	ldr	r6, [r3, #0]
 800124c:	69b3      	ldr	r3, [r6, #24]
 800124e:	b913      	cbnz	r3, 8001256 <__sfp+0x16>
 8001250:	4630      	mov	r0, r6
 8001252:	f7ff ffbd 	bl	80011d0 <__sinit>
 8001256:	3648      	adds	r6, #72	; 0x48
 8001258:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800125c:	3b01      	subs	r3, #1
 800125e:	d503      	bpl.n	8001268 <__sfp+0x28>
 8001260:	6833      	ldr	r3, [r6, #0]
 8001262:	b30b      	cbz	r3, 80012a8 <__sfp+0x68>
 8001264:	6836      	ldr	r6, [r6, #0]
 8001266:	e7f7      	b.n	8001258 <__sfp+0x18>
 8001268:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800126c:	b9d5      	cbnz	r5, 80012a4 <__sfp+0x64>
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <__sfp+0x88>)
 8001270:	60e3      	str	r3, [r4, #12]
 8001272:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001276:	6665      	str	r5, [r4, #100]	; 0x64
 8001278:	f000 f847 	bl	800130a <__retarget_lock_init_recursive>
 800127c:	f7ff ff96 	bl	80011ac <__sfp_lock_release>
 8001280:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001284:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001288:	6025      	str	r5, [r4, #0]
 800128a:	61a5      	str	r5, [r4, #24]
 800128c:	2208      	movs	r2, #8
 800128e:	4629      	mov	r1, r5
 8001290:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001294:	f7ff ff24 	bl	80010e0 <memset>
 8001298:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800129c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80012a0:	4620      	mov	r0, r4
 80012a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012a4:	3468      	adds	r4, #104	; 0x68
 80012a6:	e7d9      	b.n	800125c <__sfp+0x1c>
 80012a8:	2104      	movs	r1, #4
 80012aa:	4638      	mov	r0, r7
 80012ac:	f7ff ff62 	bl	8001174 <__sfmoreglue>
 80012b0:	4604      	mov	r4, r0
 80012b2:	6030      	str	r0, [r6, #0]
 80012b4:	2800      	cmp	r0, #0
 80012b6:	d1d5      	bne.n	8001264 <__sfp+0x24>
 80012b8:	f7ff ff78 	bl	80011ac <__sfp_lock_release>
 80012bc:	230c      	movs	r3, #12
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	e7ee      	b.n	80012a0 <__sfp+0x60>
 80012c2:	bf00      	nop
 80012c4:	08002030 	.word	0x08002030
 80012c8:	ffff0001 	.word	0xffff0001

080012cc <_fwalk_reent>:
 80012cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012d0:	4606      	mov	r6, r0
 80012d2:	4688      	mov	r8, r1
 80012d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80012d8:	2700      	movs	r7, #0
 80012da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80012de:	f1b9 0901 	subs.w	r9, r9, #1
 80012e2:	d505      	bpl.n	80012f0 <_fwalk_reent+0x24>
 80012e4:	6824      	ldr	r4, [r4, #0]
 80012e6:	2c00      	cmp	r4, #0
 80012e8:	d1f7      	bne.n	80012da <_fwalk_reent+0xe>
 80012ea:	4638      	mov	r0, r7
 80012ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012f0:	89ab      	ldrh	r3, [r5, #12]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d907      	bls.n	8001306 <_fwalk_reent+0x3a>
 80012f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80012fa:	3301      	adds	r3, #1
 80012fc:	d003      	beq.n	8001306 <_fwalk_reent+0x3a>
 80012fe:	4629      	mov	r1, r5
 8001300:	4630      	mov	r0, r6
 8001302:	47c0      	blx	r8
 8001304:	4307      	orrs	r7, r0
 8001306:	3568      	adds	r5, #104	; 0x68
 8001308:	e7e9      	b.n	80012de <_fwalk_reent+0x12>

0800130a <__retarget_lock_init_recursive>:
 800130a:	4770      	bx	lr

0800130c <__retarget_lock_acquire_recursive>:
 800130c:	4770      	bx	lr

0800130e <__retarget_lock_release_recursive>:
 800130e:	4770      	bx	lr

08001310 <sbrk_aligned>:
 8001310:	b570      	push	{r4, r5, r6, lr}
 8001312:	4e0e      	ldr	r6, [pc, #56]	; (800134c <sbrk_aligned+0x3c>)
 8001314:	460c      	mov	r4, r1
 8001316:	6831      	ldr	r1, [r6, #0]
 8001318:	4605      	mov	r5, r0
 800131a:	b911      	cbnz	r1, 8001322 <sbrk_aligned+0x12>
 800131c:	f000 fb7a 	bl	8001a14 <_sbrk_r>
 8001320:	6030      	str	r0, [r6, #0]
 8001322:	4621      	mov	r1, r4
 8001324:	4628      	mov	r0, r5
 8001326:	f000 fb75 	bl	8001a14 <_sbrk_r>
 800132a:	1c43      	adds	r3, r0, #1
 800132c:	d00a      	beq.n	8001344 <sbrk_aligned+0x34>
 800132e:	1cc4      	adds	r4, r0, #3
 8001330:	f024 0403 	bic.w	r4, r4, #3
 8001334:	42a0      	cmp	r0, r4
 8001336:	d007      	beq.n	8001348 <sbrk_aligned+0x38>
 8001338:	1a21      	subs	r1, r4, r0
 800133a:	4628      	mov	r0, r5
 800133c:	f000 fb6a 	bl	8001a14 <_sbrk_r>
 8001340:	3001      	adds	r0, #1
 8001342:	d101      	bne.n	8001348 <sbrk_aligned+0x38>
 8001344:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001348:	4620      	mov	r0, r4
 800134a:	bd70      	pop	{r4, r5, r6, pc}
 800134c:	200000e8 	.word	0x200000e8

08001350 <_malloc_r>:
 8001350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001354:	1ccd      	adds	r5, r1, #3
 8001356:	f025 0503 	bic.w	r5, r5, #3
 800135a:	3508      	adds	r5, #8
 800135c:	2d0c      	cmp	r5, #12
 800135e:	bf38      	it	cc
 8001360:	250c      	movcc	r5, #12
 8001362:	2d00      	cmp	r5, #0
 8001364:	4607      	mov	r7, r0
 8001366:	db01      	blt.n	800136c <_malloc_r+0x1c>
 8001368:	42a9      	cmp	r1, r5
 800136a:	d905      	bls.n	8001378 <_malloc_r+0x28>
 800136c:	230c      	movs	r3, #12
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	2600      	movs	r6, #0
 8001372:	4630      	mov	r0, r6
 8001374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001378:	4e2e      	ldr	r6, [pc, #184]	; (8001434 <_malloc_r+0xe4>)
 800137a:	f000 fdbb 	bl	8001ef4 <__malloc_lock>
 800137e:	6833      	ldr	r3, [r6, #0]
 8001380:	461c      	mov	r4, r3
 8001382:	bb34      	cbnz	r4, 80013d2 <_malloc_r+0x82>
 8001384:	4629      	mov	r1, r5
 8001386:	4638      	mov	r0, r7
 8001388:	f7ff ffc2 	bl	8001310 <sbrk_aligned>
 800138c:	1c43      	adds	r3, r0, #1
 800138e:	4604      	mov	r4, r0
 8001390:	d14d      	bne.n	800142e <_malloc_r+0xde>
 8001392:	6834      	ldr	r4, [r6, #0]
 8001394:	4626      	mov	r6, r4
 8001396:	2e00      	cmp	r6, #0
 8001398:	d140      	bne.n	800141c <_malloc_r+0xcc>
 800139a:	6823      	ldr	r3, [r4, #0]
 800139c:	4631      	mov	r1, r6
 800139e:	4638      	mov	r0, r7
 80013a0:	eb04 0803 	add.w	r8, r4, r3
 80013a4:	f000 fb36 	bl	8001a14 <_sbrk_r>
 80013a8:	4580      	cmp	r8, r0
 80013aa:	d13a      	bne.n	8001422 <_malloc_r+0xd2>
 80013ac:	6821      	ldr	r1, [r4, #0]
 80013ae:	3503      	adds	r5, #3
 80013b0:	1a6d      	subs	r5, r5, r1
 80013b2:	f025 0503 	bic.w	r5, r5, #3
 80013b6:	3508      	adds	r5, #8
 80013b8:	2d0c      	cmp	r5, #12
 80013ba:	bf38      	it	cc
 80013bc:	250c      	movcc	r5, #12
 80013be:	4629      	mov	r1, r5
 80013c0:	4638      	mov	r0, r7
 80013c2:	f7ff ffa5 	bl	8001310 <sbrk_aligned>
 80013c6:	3001      	adds	r0, #1
 80013c8:	d02b      	beq.n	8001422 <_malloc_r+0xd2>
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	442b      	add	r3, r5
 80013ce:	6023      	str	r3, [r4, #0]
 80013d0:	e00e      	b.n	80013f0 <_malloc_r+0xa0>
 80013d2:	6822      	ldr	r2, [r4, #0]
 80013d4:	1b52      	subs	r2, r2, r5
 80013d6:	d41e      	bmi.n	8001416 <_malloc_r+0xc6>
 80013d8:	2a0b      	cmp	r2, #11
 80013da:	d916      	bls.n	800140a <_malloc_r+0xba>
 80013dc:	1961      	adds	r1, r4, r5
 80013de:	42a3      	cmp	r3, r4
 80013e0:	6025      	str	r5, [r4, #0]
 80013e2:	bf18      	it	ne
 80013e4:	6059      	strne	r1, [r3, #4]
 80013e6:	6863      	ldr	r3, [r4, #4]
 80013e8:	bf08      	it	eq
 80013ea:	6031      	streq	r1, [r6, #0]
 80013ec:	5162      	str	r2, [r4, r5]
 80013ee:	604b      	str	r3, [r1, #4]
 80013f0:	4638      	mov	r0, r7
 80013f2:	f104 060b 	add.w	r6, r4, #11
 80013f6:	f000 fd83 	bl	8001f00 <__malloc_unlock>
 80013fa:	f026 0607 	bic.w	r6, r6, #7
 80013fe:	1d23      	adds	r3, r4, #4
 8001400:	1af2      	subs	r2, r6, r3
 8001402:	d0b6      	beq.n	8001372 <_malloc_r+0x22>
 8001404:	1b9b      	subs	r3, r3, r6
 8001406:	50a3      	str	r3, [r4, r2]
 8001408:	e7b3      	b.n	8001372 <_malloc_r+0x22>
 800140a:	6862      	ldr	r2, [r4, #4]
 800140c:	42a3      	cmp	r3, r4
 800140e:	bf0c      	ite	eq
 8001410:	6032      	streq	r2, [r6, #0]
 8001412:	605a      	strne	r2, [r3, #4]
 8001414:	e7ec      	b.n	80013f0 <_malloc_r+0xa0>
 8001416:	4623      	mov	r3, r4
 8001418:	6864      	ldr	r4, [r4, #4]
 800141a:	e7b2      	b.n	8001382 <_malloc_r+0x32>
 800141c:	4634      	mov	r4, r6
 800141e:	6876      	ldr	r6, [r6, #4]
 8001420:	e7b9      	b.n	8001396 <_malloc_r+0x46>
 8001422:	230c      	movs	r3, #12
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	4638      	mov	r0, r7
 8001428:	f000 fd6a 	bl	8001f00 <__malloc_unlock>
 800142c:	e7a1      	b.n	8001372 <_malloc_r+0x22>
 800142e:	6025      	str	r5, [r4, #0]
 8001430:	e7de      	b.n	80013f0 <_malloc_r+0xa0>
 8001432:	bf00      	nop
 8001434:	200000e4 	.word	0x200000e4

08001438 <__sfputc_r>:
 8001438:	6893      	ldr	r3, [r2, #8]
 800143a:	3b01      	subs	r3, #1
 800143c:	2b00      	cmp	r3, #0
 800143e:	b410      	push	{r4}
 8001440:	6093      	str	r3, [r2, #8]
 8001442:	da08      	bge.n	8001456 <__sfputc_r+0x1e>
 8001444:	6994      	ldr	r4, [r2, #24]
 8001446:	42a3      	cmp	r3, r4
 8001448:	db01      	blt.n	800144e <__sfputc_r+0x16>
 800144a:	290a      	cmp	r1, #10
 800144c:	d103      	bne.n	8001456 <__sfputc_r+0x1e>
 800144e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001452:	f000 bb33 	b.w	8001abc <__swbuf_r>
 8001456:	6813      	ldr	r3, [r2, #0]
 8001458:	1c58      	adds	r0, r3, #1
 800145a:	6010      	str	r0, [r2, #0]
 800145c:	7019      	strb	r1, [r3, #0]
 800145e:	4608      	mov	r0, r1
 8001460:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001464:	4770      	bx	lr

08001466 <__sfputs_r>:
 8001466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001468:	4606      	mov	r6, r0
 800146a:	460f      	mov	r7, r1
 800146c:	4614      	mov	r4, r2
 800146e:	18d5      	adds	r5, r2, r3
 8001470:	42ac      	cmp	r4, r5
 8001472:	d101      	bne.n	8001478 <__sfputs_r+0x12>
 8001474:	2000      	movs	r0, #0
 8001476:	e007      	b.n	8001488 <__sfputs_r+0x22>
 8001478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800147c:	463a      	mov	r2, r7
 800147e:	4630      	mov	r0, r6
 8001480:	f7ff ffda 	bl	8001438 <__sfputc_r>
 8001484:	1c43      	adds	r3, r0, #1
 8001486:	d1f3      	bne.n	8001470 <__sfputs_r+0xa>
 8001488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800148c <_vfiprintf_r>:
 800148c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001490:	460d      	mov	r5, r1
 8001492:	b09d      	sub	sp, #116	; 0x74
 8001494:	4614      	mov	r4, r2
 8001496:	4698      	mov	r8, r3
 8001498:	4606      	mov	r6, r0
 800149a:	b118      	cbz	r0, 80014a4 <_vfiprintf_r+0x18>
 800149c:	6983      	ldr	r3, [r0, #24]
 800149e:	b90b      	cbnz	r3, 80014a4 <_vfiprintf_r+0x18>
 80014a0:	f7ff fe96 	bl	80011d0 <__sinit>
 80014a4:	4b89      	ldr	r3, [pc, #548]	; (80016cc <_vfiprintf_r+0x240>)
 80014a6:	429d      	cmp	r5, r3
 80014a8:	d11b      	bne.n	80014e2 <_vfiprintf_r+0x56>
 80014aa:	6875      	ldr	r5, [r6, #4]
 80014ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80014ae:	07d9      	lsls	r1, r3, #31
 80014b0:	d405      	bmi.n	80014be <_vfiprintf_r+0x32>
 80014b2:	89ab      	ldrh	r3, [r5, #12]
 80014b4:	059a      	lsls	r2, r3, #22
 80014b6:	d402      	bmi.n	80014be <_vfiprintf_r+0x32>
 80014b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80014ba:	f7ff ff27 	bl	800130c <__retarget_lock_acquire_recursive>
 80014be:	89ab      	ldrh	r3, [r5, #12]
 80014c0:	071b      	lsls	r3, r3, #28
 80014c2:	d501      	bpl.n	80014c8 <_vfiprintf_r+0x3c>
 80014c4:	692b      	ldr	r3, [r5, #16]
 80014c6:	b9eb      	cbnz	r3, 8001504 <_vfiprintf_r+0x78>
 80014c8:	4629      	mov	r1, r5
 80014ca:	4630      	mov	r0, r6
 80014cc:	f000 fb5a 	bl	8001b84 <__swsetup_r>
 80014d0:	b1c0      	cbz	r0, 8001504 <_vfiprintf_r+0x78>
 80014d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80014d4:	07dc      	lsls	r4, r3, #31
 80014d6:	d50e      	bpl.n	80014f6 <_vfiprintf_r+0x6a>
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014dc:	b01d      	add	sp, #116	; 0x74
 80014de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014e2:	4b7b      	ldr	r3, [pc, #492]	; (80016d0 <_vfiprintf_r+0x244>)
 80014e4:	429d      	cmp	r5, r3
 80014e6:	d101      	bne.n	80014ec <_vfiprintf_r+0x60>
 80014e8:	68b5      	ldr	r5, [r6, #8]
 80014ea:	e7df      	b.n	80014ac <_vfiprintf_r+0x20>
 80014ec:	4b79      	ldr	r3, [pc, #484]	; (80016d4 <_vfiprintf_r+0x248>)
 80014ee:	429d      	cmp	r5, r3
 80014f0:	bf08      	it	eq
 80014f2:	68f5      	ldreq	r5, [r6, #12]
 80014f4:	e7da      	b.n	80014ac <_vfiprintf_r+0x20>
 80014f6:	89ab      	ldrh	r3, [r5, #12]
 80014f8:	0598      	lsls	r0, r3, #22
 80014fa:	d4ed      	bmi.n	80014d8 <_vfiprintf_r+0x4c>
 80014fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80014fe:	f7ff ff06 	bl	800130e <__retarget_lock_release_recursive>
 8001502:	e7e9      	b.n	80014d8 <_vfiprintf_r+0x4c>
 8001504:	2300      	movs	r3, #0
 8001506:	9309      	str	r3, [sp, #36]	; 0x24
 8001508:	2320      	movs	r3, #32
 800150a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800150e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001512:	2330      	movs	r3, #48	; 0x30
 8001514:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80016d8 <_vfiprintf_r+0x24c>
 8001518:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800151c:	f04f 0901 	mov.w	r9, #1
 8001520:	4623      	mov	r3, r4
 8001522:	469a      	mov	sl, r3
 8001524:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001528:	b10a      	cbz	r2, 800152e <_vfiprintf_r+0xa2>
 800152a:	2a25      	cmp	r2, #37	; 0x25
 800152c:	d1f9      	bne.n	8001522 <_vfiprintf_r+0x96>
 800152e:	ebba 0b04 	subs.w	fp, sl, r4
 8001532:	d00b      	beq.n	800154c <_vfiprintf_r+0xc0>
 8001534:	465b      	mov	r3, fp
 8001536:	4622      	mov	r2, r4
 8001538:	4629      	mov	r1, r5
 800153a:	4630      	mov	r0, r6
 800153c:	f7ff ff93 	bl	8001466 <__sfputs_r>
 8001540:	3001      	adds	r0, #1
 8001542:	f000 80aa 	beq.w	800169a <_vfiprintf_r+0x20e>
 8001546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001548:	445a      	add	r2, fp
 800154a:	9209      	str	r2, [sp, #36]	; 0x24
 800154c:	f89a 3000 	ldrb.w	r3, [sl]
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 80a2 	beq.w	800169a <_vfiprintf_r+0x20e>
 8001556:	2300      	movs	r3, #0
 8001558:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800155c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001560:	f10a 0a01 	add.w	sl, sl, #1
 8001564:	9304      	str	r3, [sp, #16]
 8001566:	9307      	str	r3, [sp, #28]
 8001568:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800156c:	931a      	str	r3, [sp, #104]	; 0x68
 800156e:	4654      	mov	r4, sl
 8001570:	2205      	movs	r2, #5
 8001572:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001576:	4858      	ldr	r0, [pc, #352]	; (80016d8 <_vfiprintf_r+0x24c>)
 8001578:	f7fe fe3a 	bl	80001f0 <memchr>
 800157c:	9a04      	ldr	r2, [sp, #16]
 800157e:	b9d8      	cbnz	r0, 80015b8 <_vfiprintf_r+0x12c>
 8001580:	06d1      	lsls	r1, r2, #27
 8001582:	bf44      	itt	mi
 8001584:	2320      	movmi	r3, #32
 8001586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800158a:	0713      	lsls	r3, r2, #28
 800158c:	bf44      	itt	mi
 800158e:	232b      	movmi	r3, #43	; 0x2b
 8001590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001594:	f89a 3000 	ldrb.w	r3, [sl]
 8001598:	2b2a      	cmp	r3, #42	; 0x2a
 800159a:	d015      	beq.n	80015c8 <_vfiprintf_r+0x13c>
 800159c:	9a07      	ldr	r2, [sp, #28]
 800159e:	4654      	mov	r4, sl
 80015a0:	2000      	movs	r0, #0
 80015a2:	f04f 0c0a 	mov.w	ip, #10
 80015a6:	4621      	mov	r1, r4
 80015a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80015ac:	3b30      	subs	r3, #48	; 0x30
 80015ae:	2b09      	cmp	r3, #9
 80015b0:	d94e      	bls.n	8001650 <_vfiprintf_r+0x1c4>
 80015b2:	b1b0      	cbz	r0, 80015e2 <_vfiprintf_r+0x156>
 80015b4:	9207      	str	r2, [sp, #28]
 80015b6:	e014      	b.n	80015e2 <_vfiprintf_r+0x156>
 80015b8:	eba0 0308 	sub.w	r3, r0, r8
 80015bc:	fa09 f303 	lsl.w	r3, r9, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	9304      	str	r3, [sp, #16]
 80015c4:	46a2      	mov	sl, r4
 80015c6:	e7d2      	b.n	800156e <_vfiprintf_r+0xe2>
 80015c8:	9b03      	ldr	r3, [sp, #12]
 80015ca:	1d19      	adds	r1, r3, #4
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	9103      	str	r1, [sp, #12]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bfbb      	ittet	lt
 80015d4:	425b      	neglt	r3, r3
 80015d6:	f042 0202 	orrlt.w	r2, r2, #2
 80015da:	9307      	strge	r3, [sp, #28]
 80015dc:	9307      	strlt	r3, [sp, #28]
 80015de:	bfb8      	it	lt
 80015e0:	9204      	strlt	r2, [sp, #16]
 80015e2:	7823      	ldrb	r3, [r4, #0]
 80015e4:	2b2e      	cmp	r3, #46	; 0x2e
 80015e6:	d10c      	bne.n	8001602 <_vfiprintf_r+0x176>
 80015e8:	7863      	ldrb	r3, [r4, #1]
 80015ea:	2b2a      	cmp	r3, #42	; 0x2a
 80015ec:	d135      	bne.n	800165a <_vfiprintf_r+0x1ce>
 80015ee:	9b03      	ldr	r3, [sp, #12]
 80015f0:	1d1a      	adds	r2, r3, #4
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	9203      	str	r2, [sp, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	bfb8      	it	lt
 80015fa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80015fe:	3402      	adds	r4, #2
 8001600:	9305      	str	r3, [sp, #20]
 8001602:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80016e8 <_vfiprintf_r+0x25c>
 8001606:	7821      	ldrb	r1, [r4, #0]
 8001608:	2203      	movs	r2, #3
 800160a:	4650      	mov	r0, sl
 800160c:	f7fe fdf0 	bl	80001f0 <memchr>
 8001610:	b140      	cbz	r0, 8001624 <_vfiprintf_r+0x198>
 8001612:	2340      	movs	r3, #64	; 0x40
 8001614:	eba0 000a 	sub.w	r0, r0, sl
 8001618:	fa03 f000 	lsl.w	r0, r3, r0
 800161c:	9b04      	ldr	r3, [sp, #16]
 800161e:	4303      	orrs	r3, r0
 8001620:	3401      	adds	r4, #1
 8001622:	9304      	str	r3, [sp, #16]
 8001624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001628:	482c      	ldr	r0, [pc, #176]	; (80016dc <_vfiprintf_r+0x250>)
 800162a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800162e:	2206      	movs	r2, #6
 8001630:	f7fe fdde 	bl	80001f0 <memchr>
 8001634:	2800      	cmp	r0, #0
 8001636:	d03f      	beq.n	80016b8 <_vfiprintf_r+0x22c>
 8001638:	4b29      	ldr	r3, [pc, #164]	; (80016e0 <_vfiprintf_r+0x254>)
 800163a:	bb1b      	cbnz	r3, 8001684 <_vfiprintf_r+0x1f8>
 800163c:	9b03      	ldr	r3, [sp, #12]
 800163e:	3307      	adds	r3, #7
 8001640:	f023 0307 	bic.w	r3, r3, #7
 8001644:	3308      	adds	r3, #8
 8001646:	9303      	str	r3, [sp, #12]
 8001648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800164a:	443b      	add	r3, r7
 800164c:	9309      	str	r3, [sp, #36]	; 0x24
 800164e:	e767      	b.n	8001520 <_vfiprintf_r+0x94>
 8001650:	fb0c 3202 	mla	r2, ip, r2, r3
 8001654:	460c      	mov	r4, r1
 8001656:	2001      	movs	r0, #1
 8001658:	e7a5      	b.n	80015a6 <_vfiprintf_r+0x11a>
 800165a:	2300      	movs	r3, #0
 800165c:	3401      	adds	r4, #1
 800165e:	9305      	str	r3, [sp, #20]
 8001660:	4619      	mov	r1, r3
 8001662:	f04f 0c0a 	mov.w	ip, #10
 8001666:	4620      	mov	r0, r4
 8001668:	f810 2b01 	ldrb.w	r2, [r0], #1
 800166c:	3a30      	subs	r2, #48	; 0x30
 800166e:	2a09      	cmp	r2, #9
 8001670:	d903      	bls.n	800167a <_vfiprintf_r+0x1ee>
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0c5      	beq.n	8001602 <_vfiprintf_r+0x176>
 8001676:	9105      	str	r1, [sp, #20]
 8001678:	e7c3      	b.n	8001602 <_vfiprintf_r+0x176>
 800167a:	fb0c 2101 	mla	r1, ip, r1, r2
 800167e:	4604      	mov	r4, r0
 8001680:	2301      	movs	r3, #1
 8001682:	e7f0      	b.n	8001666 <_vfiprintf_r+0x1da>
 8001684:	ab03      	add	r3, sp, #12
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	462a      	mov	r2, r5
 800168a:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <_vfiprintf_r+0x258>)
 800168c:	a904      	add	r1, sp, #16
 800168e:	4630      	mov	r0, r6
 8001690:	f3af 8000 	nop.w
 8001694:	4607      	mov	r7, r0
 8001696:	1c78      	adds	r0, r7, #1
 8001698:	d1d6      	bne.n	8001648 <_vfiprintf_r+0x1bc>
 800169a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800169c:	07d9      	lsls	r1, r3, #31
 800169e:	d405      	bmi.n	80016ac <_vfiprintf_r+0x220>
 80016a0:	89ab      	ldrh	r3, [r5, #12]
 80016a2:	059a      	lsls	r2, r3, #22
 80016a4:	d402      	bmi.n	80016ac <_vfiprintf_r+0x220>
 80016a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80016a8:	f7ff fe31 	bl	800130e <__retarget_lock_release_recursive>
 80016ac:	89ab      	ldrh	r3, [r5, #12]
 80016ae:	065b      	lsls	r3, r3, #25
 80016b0:	f53f af12 	bmi.w	80014d8 <_vfiprintf_r+0x4c>
 80016b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80016b6:	e711      	b.n	80014dc <_vfiprintf_r+0x50>
 80016b8:	ab03      	add	r3, sp, #12
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	462a      	mov	r2, r5
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <_vfiprintf_r+0x258>)
 80016c0:	a904      	add	r1, sp, #16
 80016c2:	4630      	mov	r0, r6
 80016c4:	f000 f880 	bl	80017c8 <_printf_i>
 80016c8:	e7e4      	b.n	8001694 <_vfiprintf_r+0x208>
 80016ca:	bf00      	nop
 80016cc:	08002054 	.word	0x08002054
 80016d0:	08002074 	.word	0x08002074
 80016d4:	08002034 	.word	0x08002034
 80016d8:	08002094 	.word	0x08002094
 80016dc:	0800209e 	.word	0x0800209e
 80016e0:	00000000 	.word	0x00000000
 80016e4:	08001467 	.word	0x08001467
 80016e8:	0800209a 	.word	0x0800209a

080016ec <_printf_common>:
 80016ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016f0:	4616      	mov	r6, r2
 80016f2:	4699      	mov	r9, r3
 80016f4:	688a      	ldr	r2, [r1, #8]
 80016f6:	690b      	ldr	r3, [r1, #16]
 80016f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80016fc:	4293      	cmp	r3, r2
 80016fe:	bfb8      	it	lt
 8001700:	4613      	movlt	r3, r2
 8001702:	6033      	str	r3, [r6, #0]
 8001704:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001708:	4607      	mov	r7, r0
 800170a:	460c      	mov	r4, r1
 800170c:	b10a      	cbz	r2, 8001712 <_printf_common+0x26>
 800170e:	3301      	adds	r3, #1
 8001710:	6033      	str	r3, [r6, #0]
 8001712:	6823      	ldr	r3, [r4, #0]
 8001714:	0699      	lsls	r1, r3, #26
 8001716:	bf42      	ittt	mi
 8001718:	6833      	ldrmi	r3, [r6, #0]
 800171a:	3302      	addmi	r3, #2
 800171c:	6033      	strmi	r3, [r6, #0]
 800171e:	6825      	ldr	r5, [r4, #0]
 8001720:	f015 0506 	ands.w	r5, r5, #6
 8001724:	d106      	bne.n	8001734 <_printf_common+0x48>
 8001726:	f104 0a19 	add.w	sl, r4, #25
 800172a:	68e3      	ldr	r3, [r4, #12]
 800172c:	6832      	ldr	r2, [r6, #0]
 800172e:	1a9b      	subs	r3, r3, r2
 8001730:	42ab      	cmp	r3, r5
 8001732:	dc26      	bgt.n	8001782 <_printf_common+0x96>
 8001734:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001738:	1e13      	subs	r3, r2, #0
 800173a:	6822      	ldr	r2, [r4, #0]
 800173c:	bf18      	it	ne
 800173e:	2301      	movne	r3, #1
 8001740:	0692      	lsls	r2, r2, #26
 8001742:	d42b      	bmi.n	800179c <_printf_common+0xb0>
 8001744:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001748:	4649      	mov	r1, r9
 800174a:	4638      	mov	r0, r7
 800174c:	47c0      	blx	r8
 800174e:	3001      	adds	r0, #1
 8001750:	d01e      	beq.n	8001790 <_printf_common+0xa4>
 8001752:	6823      	ldr	r3, [r4, #0]
 8001754:	68e5      	ldr	r5, [r4, #12]
 8001756:	6832      	ldr	r2, [r6, #0]
 8001758:	f003 0306 	and.w	r3, r3, #6
 800175c:	2b04      	cmp	r3, #4
 800175e:	bf08      	it	eq
 8001760:	1aad      	subeq	r5, r5, r2
 8001762:	68a3      	ldr	r3, [r4, #8]
 8001764:	6922      	ldr	r2, [r4, #16]
 8001766:	bf0c      	ite	eq
 8001768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800176c:	2500      	movne	r5, #0
 800176e:	4293      	cmp	r3, r2
 8001770:	bfc4      	itt	gt
 8001772:	1a9b      	subgt	r3, r3, r2
 8001774:	18ed      	addgt	r5, r5, r3
 8001776:	2600      	movs	r6, #0
 8001778:	341a      	adds	r4, #26
 800177a:	42b5      	cmp	r5, r6
 800177c:	d11a      	bne.n	80017b4 <_printf_common+0xc8>
 800177e:	2000      	movs	r0, #0
 8001780:	e008      	b.n	8001794 <_printf_common+0xa8>
 8001782:	2301      	movs	r3, #1
 8001784:	4652      	mov	r2, sl
 8001786:	4649      	mov	r1, r9
 8001788:	4638      	mov	r0, r7
 800178a:	47c0      	blx	r8
 800178c:	3001      	adds	r0, #1
 800178e:	d103      	bne.n	8001798 <_printf_common+0xac>
 8001790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001798:	3501      	adds	r5, #1
 800179a:	e7c6      	b.n	800172a <_printf_common+0x3e>
 800179c:	18e1      	adds	r1, r4, r3
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	2030      	movs	r0, #48	; 0x30
 80017a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80017a6:	4422      	add	r2, r4
 80017a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80017ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80017b0:	3302      	adds	r3, #2
 80017b2:	e7c7      	b.n	8001744 <_printf_common+0x58>
 80017b4:	2301      	movs	r3, #1
 80017b6:	4622      	mov	r2, r4
 80017b8:	4649      	mov	r1, r9
 80017ba:	4638      	mov	r0, r7
 80017bc:	47c0      	blx	r8
 80017be:	3001      	adds	r0, #1
 80017c0:	d0e6      	beq.n	8001790 <_printf_common+0xa4>
 80017c2:	3601      	adds	r6, #1
 80017c4:	e7d9      	b.n	800177a <_printf_common+0x8e>
	...

080017c8 <_printf_i>:
 80017c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80017cc:	7e0f      	ldrb	r7, [r1, #24]
 80017ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80017d0:	2f78      	cmp	r7, #120	; 0x78
 80017d2:	4691      	mov	r9, r2
 80017d4:	4680      	mov	r8, r0
 80017d6:	460c      	mov	r4, r1
 80017d8:	469a      	mov	sl, r3
 80017da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80017de:	d807      	bhi.n	80017f0 <_printf_i+0x28>
 80017e0:	2f62      	cmp	r7, #98	; 0x62
 80017e2:	d80a      	bhi.n	80017fa <_printf_i+0x32>
 80017e4:	2f00      	cmp	r7, #0
 80017e6:	f000 80d8 	beq.w	800199a <_printf_i+0x1d2>
 80017ea:	2f58      	cmp	r7, #88	; 0x58
 80017ec:	f000 80a3 	beq.w	8001936 <_printf_i+0x16e>
 80017f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80017f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80017f8:	e03a      	b.n	8001870 <_printf_i+0xa8>
 80017fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80017fe:	2b15      	cmp	r3, #21
 8001800:	d8f6      	bhi.n	80017f0 <_printf_i+0x28>
 8001802:	a101      	add	r1, pc, #4	; (adr r1, 8001808 <_printf_i+0x40>)
 8001804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001808:	08001861 	.word	0x08001861
 800180c:	08001875 	.word	0x08001875
 8001810:	080017f1 	.word	0x080017f1
 8001814:	080017f1 	.word	0x080017f1
 8001818:	080017f1 	.word	0x080017f1
 800181c:	080017f1 	.word	0x080017f1
 8001820:	08001875 	.word	0x08001875
 8001824:	080017f1 	.word	0x080017f1
 8001828:	080017f1 	.word	0x080017f1
 800182c:	080017f1 	.word	0x080017f1
 8001830:	080017f1 	.word	0x080017f1
 8001834:	08001981 	.word	0x08001981
 8001838:	080018a5 	.word	0x080018a5
 800183c:	08001963 	.word	0x08001963
 8001840:	080017f1 	.word	0x080017f1
 8001844:	080017f1 	.word	0x080017f1
 8001848:	080019a3 	.word	0x080019a3
 800184c:	080017f1 	.word	0x080017f1
 8001850:	080018a5 	.word	0x080018a5
 8001854:	080017f1 	.word	0x080017f1
 8001858:	080017f1 	.word	0x080017f1
 800185c:	0800196b 	.word	0x0800196b
 8001860:	682b      	ldr	r3, [r5, #0]
 8001862:	1d1a      	adds	r2, r3, #4
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	602a      	str	r2, [r5, #0]
 8001868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800186c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001870:	2301      	movs	r3, #1
 8001872:	e0a3      	b.n	80019bc <_printf_i+0x1f4>
 8001874:	6820      	ldr	r0, [r4, #0]
 8001876:	6829      	ldr	r1, [r5, #0]
 8001878:	0606      	lsls	r6, r0, #24
 800187a:	f101 0304 	add.w	r3, r1, #4
 800187e:	d50a      	bpl.n	8001896 <_printf_i+0xce>
 8001880:	680e      	ldr	r6, [r1, #0]
 8001882:	602b      	str	r3, [r5, #0]
 8001884:	2e00      	cmp	r6, #0
 8001886:	da03      	bge.n	8001890 <_printf_i+0xc8>
 8001888:	232d      	movs	r3, #45	; 0x2d
 800188a:	4276      	negs	r6, r6
 800188c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001890:	485e      	ldr	r0, [pc, #376]	; (8001a0c <_printf_i+0x244>)
 8001892:	230a      	movs	r3, #10
 8001894:	e019      	b.n	80018ca <_printf_i+0x102>
 8001896:	680e      	ldr	r6, [r1, #0]
 8001898:	602b      	str	r3, [r5, #0]
 800189a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800189e:	bf18      	it	ne
 80018a0:	b236      	sxthne	r6, r6
 80018a2:	e7ef      	b.n	8001884 <_printf_i+0xbc>
 80018a4:	682b      	ldr	r3, [r5, #0]
 80018a6:	6820      	ldr	r0, [r4, #0]
 80018a8:	1d19      	adds	r1, r3, #4
 80018aa:	6029      	str	r1, [r5, #0]
 80018ac:	0601      	lsls	r1, r0, #24
 80018ae:	d501      	bpl.n	80018b4 <_printf_i+0xec>
 80018b0:	681e      	ldr	r6, [r3, #0]
 80018b2:	e002      	b.n	80018ba <_printf_i+0xf2>
 80018b4:	0646      	lsls	r6, r0, #25
 80018b6:	d5fb      	bpl.n	80018b0 <_printf_i+0xe8>
 80018b8:	881e      	ldrh	r6, [r3, #0]
 80018ba:	4854      	ldr	r0, [pc, #336]	; (8001a0c <_printf_i+0x244>)
 80018bc:	2f6f      	cmp	r7, #111	; 0x6f
 80018be:	bf0c      	ite	eq
 80018c0:	2308      	moveq	r3, #8
 80018c2:	230a      	movne	r3, #10
 80018c4:	2100      	movs	r1, #0
 80018c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80018ca:	6865      	ldr	r5, [r4, #4]
 80018cc:	60a5      	str	r5, [r4, #8]
 80018ce:	2d00      	cmp	r5, #0
 80018d0:	bfa2      	ittt	ge
 80018d2:	6821      	ldrge	r1, [r4, #0]
 80018d4:	f021 0104 	bicge.w	r1, r1, #4
 80018d8:	6021      	strge	r1, [r4, #0]
 80018da:	b90e      	cbnz	r6, 80018e0 <_printf_i+0x118>
 80018dc:	2d00      	cmp	r5, #0
 80018de:	d04d      	beq.n	800197c <_printf_i+0x1b4>
 80018e0:	4615      	mov	r5, r2
 80018e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80018e6:	fb03 6711 	mls	r7, r3, r1, r6
 80018ea:	5dc7      	ldrb	r7, [r0, r7]
 80018ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80018f0:	4637      	mov	r7, r6
 80018f2:	42bb      	cmp	r3, r7
 80018f4:	460e      	mov	r6, r1
 80018f6:	d9f4      	bls.n	80018e2 <_printf_i+0x11a>
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d10b      	bne.n	8001914 <_printf_i+0x14c>
 80018fc:	6823      	ldr	r3, [r4, #0]
 80018fe:	07de      	lsls	r6, r3, #31
 8001900:	d508      	bpl.n	8001914 <_printf_i+0x14c>
 8001902:	6923      	ldr	r3, [r4, #16]
 8001904:	6861      	ldr	r1, [r4, #4]
 8001906:	4299      	cmp	r1, r3
 8001908:	bfde      	ittt	le
 800190a:	2330      	movle	r3, #48	; 0x30
 800190c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001910:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001914:	1b52      	subs	r2, r2, r5
 8001916:	6122      	str	r2, [r4, #16]
 8001918:	f8cd a000 	str.w	sl, [sp]
 800191c:	464b      	mov	r3, r9
 800191e:	aa03      	add	r2, sp, #12
 8001920:	4621      	mov	r1, r4
 8001922:	4640      	mov	r0, r8
 8001924:	f7ff fee2 	bl	80016ec <_printf_common>
 8001928:	3001      	adds	r0, #1
 800192a:	d14c      	bne.n	80019c6 <_printf_i+0x1fe>
 800192c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001930:	b004      	add	sp, #16
 8001932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001936:	4835      	ldr	r0, [pc, #212]	; (8001a0c <_printf_i+0x244>)
 8001938:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800193c:	6829      	ldr	r1, [r5, #0]
 800193e:	6823      	ldr	r3, [r4, #0]
 8001940:	f851 6b04 	ldr.w	r6, [r1], #4
 8001944:	6029      	str	r1, [r5, #0]
 8001946:	061d      	lsls	r5, r3, #24
 8001948:	d514      	bpl.n	8001974 <_printf_i+0x1ac>
 800194a:	07df      	lsls	r7, r3, #31
 800194c:	bf44      	itt	mi
 800194e:	f043 0320 	orrmi.w	r3, r3, #32
 8001952:	6023      	strmi	r3, [r4, #0]
 8001954:	b91e      	cbnz	r6, 800195e <_printf_i+0x196>
 8001956:	6823      	ldr	r3, [r4, #0]
 8001958:	f023 0320 	bic.w	r3, r3, #32
 800195c:	6023      	str	r3, [r4, #0]
 800195e:	2310      	movs	r3, #16
 8001960:	e7b0      	b.n	80018c4 <_printf_i+0xfc>
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	f043 0320 	orr.w	r3, r3, #32
 8001968:	6023      	str	r3, [r4, #0]
 800196a:	2378      	movs	r3, #120	; 0x78
 800196c:	4828      	ldr	r0, [pc, #160]	; (8001a10 <_printf_i+0x248>)
 800196e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001972:	e7e3      	b.n	800193c <_printf_i+0x174>
 8001974:	0659      	lsls	r1, r3, #25
 8001976:	bf48      	it	mi
 8001978:	b2b6      	uxthmi	r6, r6
 800197a:	e7e6      	b.n	800194a <_printf_i+0x182>
 800197c:	4615      	mov	r5, r2
 800197e:	e7bb      	b.n	80018f8 <_printf_i+0x130>
 8001980:	682b      	ldr	r3, [r5, #0]
 8001982:	6826      	ldr	r6, [r4, #0]
 8001984:	6961      	ldr	r1, [r4, #20]
 8001986:	1d18      	adds	r0, r3, #4
 8001988:	6028      	str	r0, [r5, #0]
 800198a:	0635      	lsls	r5, r6, #24
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	d501      	bpl.n	8001994 <_printf_i+0x1cc>
 8001990:	6019      	str	r1, [r3, #0]
 8001992:	e002      	b.n	800199a <_printf_i+0x1d2>
 8001994:	0670      	lsls	r0, r6, #25
 8001996:	d5fb      	bpl.n	8001990 <_printf_i+0x1c8>
 8001998:	8019      	strh	r1, [r3, #0]
 800199a:	2300      	movs	r3, #0
 800199c:	6123      	str	r3, [r4, #16]
 800199e:	4615      	mov	r5, r2
 80019a0:	e7ba      	b.n	8001918 <_printf_i+0x150>
 80019a2:	682b      	ldr	r3, [r5, #0]
 80019a4:	1d1a      	adds	r2, r3, #4
 80019a6:	602a      	str	r2, [r5, #0]
 80019a8:	681d      	ldr	r5, [r3, #0]
 80019aa:	6862      	ldr	r2, [r4, #4]
 80019ac:	2100      	movs	r1, #0
 80019ae:	4628      	mov	r0, r5
 80019b0:	f7fe fc1e 	bl	80001f0 <memchr>
 80019b4:	b108      	cbz	r0, 80019ba <_printf_i+0x1f2>
 80019b6:	1b40      	subs	r0, r0, r5
 80019b8:	6060      	str	r0, [r4, #4]
 80019ba:	6863      	ldr	r3, [r4, #4]
 80019bc:	6123      	str	r3, [r4, #16]
 80019be:	2300      	movs	r3, #0
 80019c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80019c4:	e7a8      	b.n	8001918 <_printf_i+0x150>
 80019c6:	6923      	ldr	r3, [r4, #16]
 80019c8:	462a      	mov	r2, r5
 80019ca:	4649      	mov	r1, r9
 80019cc:	4640      	mov	r0, r8
 80019ce:	47d0      	blx	sl
 80019d0:	3001      	adds	r0, #1
 80019d2:	d0ab      	beq.n	800192c <_printf_i+0x164>
 80019d4:	6823      	ldr	r3, [r4, #0]
 80019d6:	079b      	lsls	r3, r3, #30
 80019d8:	d413      	bmi.n	8001a02 <_printf_i+0x23a>
 80019da:	68e0      	ldr	r0, [r4, #12]
 80019dc:	9b03      	ldr	r3, [sp, #12]
 80019de:	4298      	cmp	r0, r3
 80019e0:	bfb8      	it	lt
 80019e2:	4618      	movlt	r0, r3
 80019e4:	e7a4      	b.n	8001930 <_printf_i+0x168>
 80019e6:	2301      	movs	r3, #1
 80019e8:	4632      	mov	r2, r6
 80019ea:	4649      	mov	r1, r9
 80019ec:	4640      	mov	r0, r8
 80019ee:	47d0      	blx	sl
 80019f0:	3001      	adds	r0, #1
 80019f2:	d09b      	beq.n	800192c <_printf_i+0x164>
 80019f4:	3501      	adds	r5, #1
 80019f6:	68e3      	ldr	r3, [r4, #12]
 80019f8:	9903      	ldr	r1, [sp, #12]
 80019fa:	1a5b      	subs	r3, r3, r1
 80019fc:	42ab      	cmp	r3, r5
 80019fe:	dcf2      	bgt.n	80019e6 <_printf_i+0x21e>
 8001a00:	e7eb      	b.n	80019da <_printf_i+0x212>
 8001a02:	2500      	movs	r5, #0
 8001a04:	f104 0619 	add.w	r6, r4, #25
 8001a08:	e7f5      	b.n	80019f6 <_printf_i+0x22e>
 8001a0a:	bf00      	nop
 8001a0c:	080020a5 	.word	0x080020a5
 8001a10:	080020b6 	.word	0x080020b6

08001a14 <_sbrk_r>:
 8001a14:	b538      	push	{r3, r4, r5, lr}
 8001a16:	4d06      	ldr	r5, [pc, #24]	; (8001a30 <_sbrk_r+0x1c>)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	4608      	mov	r0, r1
 8001a1e:	602b      	str	r3, [r5, #0]
 8001a20:	f7ff fad4 	bl	8000fcc <_sbrk>
 8001a24:	1c43      	adds	r3, r0, #1
 8001a26:	d102      	bne.n	8001a2e <_sbrk_r+0x1a>
 8001a28:	682b      	ldr	r3, [r5, #0]
 8001a2a:	b103      	cbz	r3, 8001a2e <_sbrk_r+0x1a>
 8001a2c:	6023      	str	r3, [r4, #0]
 8001a2e:	bd38      	pop	{r3, r4, r5, pc}
 8001a30:	200000ec 	.word	0x200000ec

08001a34 <__sread>:
 8001a34:	b510      	push	{r4, lr}
 8001a36:	460c      	mov	r4, r1
 8001a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a3c:	f000 fab2 	bl	8001fa4 <_read_r>
 8001a40:	2800      	cmp	r0, #0
 8001a42:	bfab      	itete	ge
 8001a44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001a46:	89a3      	ldrhlt	r3, [r4, #12]
 8001a48:	181b      	addge	r3, r3, r0
 8001a4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001a4e:	bfac      	ite	ge
 8001a50:	6563      	strge	r3, [r4, #84]	; 0x54
 8001a52:	81a3      	strhlt	r3, [r4, #12]
 8001a54:	bd10      	pop	{r4, pc}

08001a56 <__swrite>:
 8001a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a5a:	461f      	mov	r7, r3
 8001a5c:	898b      	ldrh	r3, [r1, #12]
 8001a5e:	05db      	lsls	r3, r3, #23
 8001a60:	4605      	mov	r5, r0
 8001a62:	460c      	mov	r4, r1
 8001a64:	4616      	mov	r6, r2
 8001a66:	d505      	bpl.n	8001a74 <__swrite+0x1e>
 8001a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f000 f9c8 	bl	8001e04 <_lseek_r>
 8001a74:	89a3      	ldrh	r3, [r4, #12]
 8001a76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a7e:	81a3      	strh	r3, [r4, #12]
 8001a80:	4632      	mov	r2, r6
 8001a82:	463b      	mov	r3, r7
 8001a84:	4628      	mov	r0, r5
 8001a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a8a:	f000 b869 	b.w	8001b60 <_write_r>

08001a8e <__sseek>:
 8001a8e:	b510      	push	{r4, lr}
 8001a90:	460c      	mov	r4, r1
 8001a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a96:	f000 f9b5 	bl	8001e04 <_lseek_r>
 8001a9a:	1c43      	adds	r3, r0, #1
 8001a9c:	89a3      	ldrh	r3, [r4, #12]
 8001a9e:	bf15      	itete	ne
 8001aa0:	6560      	strne	r0, [r4, #84]	; 0x54
 8001aa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001aa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001aaa:	81a3      	strheq	r3, [r4, #12]
 8001aac:	bf18      	it	ne
 8001aae:	81a3      	strhne	r3, [r4, #12]
 8001ab0:	bd10      	pop	{r4, pc}

08001ab2 <__sclose>:
 8001ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ab6:	f000 b8d3 	b.w	8001c60 <_close_r>
	...

08001abc <__swbuf_r>:
 8001abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001abe:	460e      	mov	r6, r1
 8001ac0:	4614      	mov	r4, r2
 8001ac2:	4605      	mov	r5, r0
 8001ac4:	b118      	cbz	r0, 8001ace <__swbuf_r+0x12>
 8001ac6:	6983      	ldr	r3, [r0, #24]
 8001ac8:	b90b      	cbnz	r3, 8001ace <__swbuf_r+0x12>
 8001aca:	f7ff fb81 	bl	80011d0 <__sinit>
 8001ace:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <__swbuf_r+0x98>)
 8001ad0:	429c      	cmp	r4, r3
 8001ad2:	d12b      	bne.n	8001b2c <__swbuf_r+0x70>
 8001ad4:	686c      	ldr	r4, [r5, #4]
 8001ad6:	69a3      	ldr	r3, [r4, #24]
 8001ad8:	60a3      	str	r3, [r4, #8]
 8001ada:	89a3      	ldrh	r3, [r4, #12]
 8001adc:	071a      	lsls	r2, r3, #28
 8001ade:	d52f      	bpl.n	8001b40 <__swbuf_r+0x84>
 8001ae0:	6923      	ldr	r3, [r4, #16]
 8001ae2:	b36b      	cbz	r3, 8001b40 <__swbuf_r+0x84>
 8001ae4:	6923      	ldr	r3, [r4, #16]
 8001ae6:	6820      	ldr	r0, [r4, #0]
 8001ae8:	1ac0      	subs	r0, r0, r3
 8001aea:	6963      	ldr	r3, [r4, #20]
 8001aec:	b2f6      	uxtb	r6, r6
 8001aee:	4283      	cmp	r3, r0
 8001af0:	4637      	mov	r7, r6
 8001af2:	dc04      	bgt.n	8001afe <__swbuf_r+0x42>
 8001af4:	4621      	mov	r1, r4
 8001af6:	4628      	mov	r0, r5
 8001af8:	f000 f948 	bl	8001d8c <_fflush_r>
 8001afc:	bb30      	cbnz	r0, 8001b4c <__swbuf_r+0x90>
 8001afe:	68a3      	ldr	r3, [r4, #8]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	60a3      	str	r3, [r4, #8]
 8001b04:	6823      	ldr	r3, [r4, #0]
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	6022      	str	r2, [r4, #0]
 8001b0a:	701e      	strb	r6, [r3, #0]
 8001b0c:	6963      	ldr	r3, [r4, #20]
 8001b0e:	3001      	adds	r0, #1
 8001b10:	4283      	cmp	r3, r0
 8001b12:	d004      	beq.n	8001b1e <__swbuf_r+0x62>
 8001b14:	89a3      	ldrh	r3, [r4, #12]
 8001b16:	07db      	lsls	r3, r3, #31
 8001b18:	d506      	bpl.n	8001b28 <__swbuf_r+0x6c>
 8001b1a:	2e0a      	cmp	r6, #10
 8001b1c:	d104      	bne.n	8001b28 <__swbuf_r+0x6c>
 8001b1e:	4621      	mov	r1, r4
 8001b20:	4628      	mov	r0, r5
 8001b22:	f000 f933 	bl	8001d8c <_fflush_r>
 8001b26:	b988      	cbnz	r0, 8001b4c <__swbuf_r+0x90>
 8001b28:	4638      	mov	r0, r7
 8001b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <__swbuf_r+0x9c>)
 8001b2e:	429c      	cmp	r4, r3
 8001b30:	d101      	bne.n	8001b36 <__swbuf_r+0x7a>
 8001b32:	68ac      	ldr	r4, [r5, #8]
 8001b34:	e7cf      	b.n	8001ad6 <__swbuf_r+0x1a>
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <__swbuf_r+0xa0>)
 8001b38:	429c      	cmp	r4, r3
 8001b3a:	bf08      	it	eq
 8001b3c:	68ec      	ldreq	r4, [r5, #12]
 8001b3e:	e7ca      	b.n	8001ad6 <__swbuf_r+0x1a>
 8001b40:	4621      	mov	r1, r4
 8001b42:	4628      	mov	r0, r5
 8001b44:	f000 f81e 	bl	8001b84 <__swsetup_r>
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d0cb      	beq.n	8001ae4 <__swbuf_r+0x28>
 8001b4c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001b50:	e7ea      	b.n	8001b28 <__swbuf_r+0x6c>
 8001b52:	bf00      	nop
 8001b54:	08002054 	.word	0x08002054
 8001b58:	08002074 	.word	0x08002074
 8001b5c:	08002034 	.word	0x08002034

08001b60 <_write_r>:
 8001b60:	b538      	push	{r3, r4, r5, lr}
 8001b62:	4d07      	ldr	r5, [pc, #28]	; (8001b80 <_write_r+0x20>)
 8001b64:	4604      	mov	r4, r0
 8001b66:	4608      	mov	r0, r1
 8001b68:	4611      	mov	r1, r2
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	602a      	str	r2, [r5, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	f7ff f9db 	bl	8000f2a <_write>
 8001b74:	1c43      	adds	r3, r0, #1
 8001b76:	d102      	bne.n	8001b7e <_write_r+0x1e>
 8001b78:	682b      	ldr	r3, [r5, #0]
 8001b7a:	b103      	cbz	r3, 8001b7e <_write_r+0x1e>
 8001b7c:	6023      	str	r3, [r4, #0]
 8001b7e:	bd38      	pop	{r3, r4, r5, pc}
 8001b80:	200000ec 	.word	0x200000ec

08001b84 <__swsetup_r>:
 8001b84:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <__swsetup_r+0xcc>)
 8001b86:	b570      	push	{r4, r5, r6, lr}
 8001b88:	681d      	ldr	r5, [r3, #0]
 8001b8a:	4606      	mov	r6, r0
 8001b8c:	460c      	mov	r4, r1
 8001b8e:	b125      	cbz	r5, 8001b9a <__swsetup_r+0x16>
 8001b90:	69ab      	ldr	r3, [r5, #24]
 8001b92:	b913      	cbnz	r3, 8001b9a <__swsetup_r+0x16>
 8001b94:	4628      	mov	r0, r5
 8001b96:	f7ff fb1b 	bl	80011d0 <__sinit>
 8001b9a:	4b2e      	ldr	r3, [pc, #184]	; (8001c54 <__swsetup_r+0xd0>)
 8001b9c:	429c      	cmp	r4, r3
 8001b9e:	d10f      	bne.n	8001bc0 <__swsetup_r+0x3c>
 8001ba0:	686c      	ldr	r4, [r5, #4]
 8001ba2:	89a3      	ldrh	r3, [r4, #12]
 8001ba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001ba8:	0719      	lsls	r1, r3, #28
 8001baa:	d42c      	bmi.n	8001c06 <__swsetup_r+0x82>
 8001bac:	06dd      	lsls	r5, r3, #27
 8001bae:	d411      	bmi.n	8001bd4 <__swsetup_r+0x50>
 8001bb0:	2309      	movs	r3, #9
 8001bb2:	6033      	str	r3, [r6, #0]
 8001bb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001bb8:	81a3      	strh	r3, [r4, #12]
 8001bba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bbe:	e03e      	b.n	8001c3e <__swsetup_r+0xba>
 8001bc0:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <__swsetup_r+0xd4>)
 8001bc2:	429c      	cmp	r4, r3
 8001bc4:	d101      	bne.n	8001bca <__swsetup_r+0x46>
 8001bc6:	68ac      	ldr	r4, [r5, #8]
 8001bc8:	e7eb      	b.n	8001ba2 <__swsetup_r+0x1e>
 8001bca:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <__swsetup_r+0xd8>)
 8001bcc:	429c      	cmp	r4, r3
 8001bce:	bf08      	it	eq
 8001bd0:	68ec      	ldreq	r4, [r5, #12]
 8001bd2:	e7e6      	b.n	8001ba2 <__swsetup_r+0x1e>
 8001bd4:	0758      	lsls	r0, r3, #29
 8001bd6:	d512      	bpl.n	8001bfe <__swsetup_r+0x7a>
 8001bd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001bda:	b141      	cbz	r1, 8001bee <__swsetup_r+0x6a>
 8001bdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001be0:	4299      	cmp	r1, r3
 8001be2:	d002      	beq.n	8001bea <__swsetup_r+0x66>
 8001be4:	4630      	mov	r0, r6
 8001be6:	f000 f991 	bl	8001f0c <_free_r>
 8001bea:	2300      	movs	r3, #0
 8001bec:	6363      	str	r3, [r4, #52]	; 0x34
 8001bee:	89a3      	ldrh	r3, [r4, #12]
 8001bf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001bf4:	81a3      	strh	r3, [r4, #12]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	6063      	str	r3, [r4, #4]
 8001bfa:	6923      	ldr	r3, [r4, #16]
 8001bfc:	6023      	str	r3, [r4, #0]
 8001bfe:	89a3      	ldrh	r3, [r4, #12]
 8001c00:	f043 0308 	orr.w	r3, r3, #8
 8001c04:	81a3      	strh	r3, [r4, #12]
 8001c06:	6923      	ldr	r3, [r4, #16]
 8001c08:	b94b      	cbnz	r3, 8001c1e <__swsetup_r+0x9a>
 8001c0a:	89a3      	ldrh	r3, [r4, #12]
 8001c0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c14:	d003      	beq.n	8001c1e <__swsetup_r+0x9a>
 8001c16:	4621      	mov	r1, r4
 8001c18:	4630      	mov	r0, r6
 8001c1a:	f000 f92b 	bl	8001e74 <__smakebuf_r>
 8001c1e:	89a0      	ldrh	r0, [r4, #12]
 8001c20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c24:	f010 0301 	ands.w	r3, r0, #1
 8001c28:	d00a      	beq.n	8001c40 <__swsetup_r+0xbc>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60a3      	str	r3, [r4, #8]
 8001c2e:	6963      	ldr	r3, [r4, #20]
 8001c30:	425b      	negs	r3, r3
 8001c32:	61a3      	str	r3, [r4, #24]
 8001c34:	6923      	ldr	r3, [r4, #16]
 8001c36:	b943      	cbnz	r3, 8001c4a <__swsetup_r+0xc6>
 8001c38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001c3c:	d1ba      	bne.n	8001bb4 <__swsetup_r+0x30>
 8001c3e:	bd70      	pop	{r4, r5, r6, pc}
 8001c40:	0781      	lsls	r1, r0, #30
 8001c42:	bf58      	it	pl
 8001c44:	6963      	ldrpl	r3, [r4, #20]
 8001c46:	60a3      	str	r3, [r4, #8]
 8001c48:	e7f4      	b.n	8001c34 <__swsetup_r+0xb0>
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	e7f7      	b.n	8001c3e <__swsetup_r+0xba>
 8001c4e:	bf00      	nop
 8001c50:	20000014 	.word	0x20000014
 8001c54:	08002054 	.word	0x08002054
 8001c58:	08002074 	.word	0x08002074
 8001c5c:	08002034 	.word	0x08002034

08001c60 <_close_r>:
 8001c60:	b538      	push	{r3, r4, r5, lr}
 8001c62:	4d06      	ldr	r5, [pc, #24]	; (8001c7c <_close_r+0x1c>)
 8001c64:	2300      	movs	r3, #0
 8001c66:	4604      	mov	r4, r0
 8001c68:	4608      	mov	r0, r1
 8001c6a:	602b      	str	r3, [r5, #0]
 8001c6c:	f7ff f979 	bl	8000f62 <_close>
 8001c70:	1c43      	adds	r3, r0, #1
 8001c72:	d102      	bne.n	8001c7a <_close_r+0x1a>
 8001c74:	682b      	ldr	r3, [r5, #0]
 8001c76:	b103      	cbz	r3, 8001c7a <_close_r+0x1a>
 8001c78:	6023      	str	r3, [r4, #0]
 8001c7a:	bd38      	pop	{r3, r4, r5, pc}
 8001c7c:	200000ec 	.word	0x200000ec

08001c80 <__sflush_r>:
 8001c80:	898a      	ldrh	r2, [r1, #12]
 8001c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c86:	4605      	mov	r5, r0
 8001c88:	0710      	lsls	r0, r2, #28
 8001c8a:	460c      	mov	r4, r1
 8001c8c:	d458      	bmi.n	8001d40 <__sflush_r+0xc0>
 8001c8e:	684b      	ldr	r3, [r1, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	dc05      	bgt.n	8001ca0 <__sflush_r+0x20>
 8001c94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	dc02      	bgt.n	8001ca0 <__sflush_r+0x20>
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ca0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ca2:	2e00      	cmp	r6, #0
 8001ca4:	d0f9      	beq.n	8001c9a <__sflush_r+0x1a>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001cac:	682f      	ldr	r7, [r5, #0]
 8001cae:	602b      	str	r3, [r5, #0]
 8001cb0:	d032      	beq.n	8001d18 <__sflush_r+0x98>
 8001cb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001cb4:	89a3      	ldrh	r3, [r4, #12]
 8001cb6:	075a      	lsls	r2, r3, #29
 8001cb8:	d505      	bpl.n	8001cc6 <__sflush_r+0x46>
 8001cba:	6863      	ldr	r3, [r4, #4]
 8001cbc:	1ac0      	subs	r0, r0, r3
 8001cbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001cc0:	b10b      	cbz	r3, 8001cc6 <__sflush_r+0x46>
 8001cc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cc4:	1ac0      	subs	r0, r0, r3
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	4602      	mov	r2, r0
 8001cca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ccc:	6a21      	ldr	r1, [r4, #32]
 8001cce:	4628      	mov	r0, r5
 8001cd0:	47b0      	blx	r6
 8001cd2:	1c43      	adds	r3, r0, #1
 8001cd4:	89a3      	ldrh	r3, [r4, #12]
 8001cd6:	d106      	bne.n	8001ce6 <__sflush_r+0x66>
 8001cd8:	6829      	ldr	r1, [r5, #0]
 8001cda:	291d      	cmp	r1, #29
 8001cdc:	d82c      	bhi.n	8001d38 <__sflush_r+0xb8>
 8001cde:	4a2a      	ldr	r2, [pc, #168]	; (8001d88 <__sflush_r+0x108>)
 8001ce0:	40ca      	lsrs	r2, r1
 8001ce2:	07d6      	lsls	r6, r2, #31
 8001ce4:	d528      	bpl.n	8001d38 <__sflush_r+0xb8>
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	6062      	str	r2, [r4, #4]
 8001cea:	04d9      	lsls	r1, r3, #19
 8001cec:	6922      	ldr	r2, [r4, #16]
 8001cee:	6022      	str	r2, [r4, #0]
 8001cf0:	d504      	bpl.n	8001cfc <__sflush_r+0x7c>
 8001cf2:	1c42      	adds	r2, r0, #1
 8001cf4:	d101      	bne.n	8001cfa <__sflush_r+0x7a>
 8001cf6:	682b      	ldr	r3, [r5, #0]
 8001cf8:	b903      	cbnz	r3, 8001cfc <__sflush_r+0x7c>
 8001cfa:	6560      	str	r0, [r4, #84]	; 0x54
 8001cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001cfe:	602f      	str	r7, [r5, #0]
 8001d00:	2900      	cmp	r1, #0
 8001d02:	d0ca      	beq.n	8001c9a <__sflush_r+0x1a>
 8001d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d08:	4299      	cmp	r1, r3
 8001d0a:	d002      	beq.n	8001d12 <__sflush_r+0x92>
 8001d0c:	4628      	mov	r0, r5
 8001d0e:	f000 f8fd 	bl	8001f0c <_free_r>
 8001d12:	2000      	movs	r0, #0
 8001d14:	6360      	str	r0, [r4, #52]	; 0x34
 8001d16:	e7c1      	b.n	8001c9c <__sflush_r+0x1c>
 8001d18:	6a21      	ldr	r1, [r4, #32]
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	4628      	mov	r0, r5
 8001d1e:	47b0      	blx	r6
 8001d20:	1c41      	adds	r1, r0, #1
 8001d22:	d1c7      	bne.n	8001cb4 <__sflush_r+0x34>
 8001d24:	682b      	ldr	r3, [r5, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0c4      	beq.n	8001cb4 <__sflush_r+0x34>
 8001d2a:	2b1d      	cmp	r3, #29
 8001d2c:	d001      	beq.n	8001d32 <__sflush_r+0xb2>
 8001d2e:	2b16      	cmp	r3, #22
 8001d30:	d101      	bne.n	8001d36 <__sflush_r+0xb6>
 8001d32:	602f      	str	r7, [r5, #0]
 8001d34:	e7b1      	b.n	8001c9a <__sflush_r+0x1a>
 8001d36:	89a3      	ldrh	r3, [r4, #12]
 8001d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d3c:	81a3      	strh	r3, [r4, #12]
 8001d3e:	e7ad      	b.n	8001c9c <__sflush_r+0x1c>
 8001d40:	690f      	ldr	r7, [r1, #16]
 8001d42:	2f00      	cmp	r7, #0
 8001d44:	d0a9      	beq.n	8001c9a <__sflush_r+0x1a>
 8001d46:	0793      	lsls	r3, r2, #30
 8001d48:	680e      	ldr	r6, [r1, #0]
 8001d4a:	bf08      	it	eq
 8001d4c:	694b      	ldreq	r3, [r1, #20]
 8001d4e:	600f      	str	r7, [r1, #0]
 8001d50:	bf18      	it	ne
 8001d52:	2300      	movne	r3, #0
 8001d54:	eba6 0807 	sub.w	r8, r6, r7
 8001d58:	608b      	str	r3, [r1, #8]
 8001d5a:	f1b8 0f00 	cmp.w	r8, #0
 8001d5e:	dd9c      	ble.n	8001c9a <__sflush_r+0x1a>
 8001d60:	6a21      	ldr	r1, [r4, #32]
 8001d62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001d64:	4643      	mov	r3, r8
 8001d66:	463a      	mov	r2, r7
 8001d68:	4628      	mov	r0, r5
 8001d6a:	47b0      	blx	r6
 8001d6c:	2800      	cmp	r0, #0
 8001d6e:	dc06      	bgt.n	8001d7e <__sflush_r+0xfe>
 8001d70:	89a3      	ldrh	r3, [r4, #12]
 8001d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d76:	81a3      	strh	r3, [r4, #12]
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d7c:	e78e      	b.n	8001c9c <__sflush_r+0x1c>
 8001d7e:	4407      	add	r7, r0
 8001d80:	eba8 0800 	sub.w	r8, r8, r0
 8001d84:	e7e9      	b.n	8001d5a <__sflush_r+0xda>
 8001d86:	bf00      	nop
 8001d88:	20400001 	.word	0x20400001

08001d8c <_fflush_r>:
 8001d8c:	b538      	push	{r3, r4, r5, lr}
 8001d8e:	690b      	ldr	r3, [r1, #16]
 8001d90:	4605      	mov	r5, r0
 8001d92:	460c      	mov	r4, r1
 8001d94:	b913      	cbnz	r3, 8001d9c <_fflush_r+0x10>
 8001d96:	2500      	movs	r5, #0
 8001d98:	4628      	mov	r0, r5
 8001d9a:	bd38      	pop	{r3, r4, r5, pc}
 8001d9c:	b118      	cbz	r0, 8001da6 <_fflush_r+0x1a>
 8001d9e:	6983      	ldr	r3, [r0, #24]
 8001da0:	b90b      	cbnz	r3, 8001da6 <_fflush_r+0x1a>
 8001da2:	f7ff fa15 	bl	80011d0 <__sinit>
 8001da6:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <_fflush_r+0x6c>)
 8001da8:	429c      	cmp	r4, r3
 8001daa:	d11b      	bne.n	8001de4 <_fflush_r+0x58>
 8001dac:	686c      	ldr	r4, [r5, #4]
 8001dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0ef      	beq.n	8001d96 <_fflush_r+0xa>
 8001db6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001db8:	07d0      	lsls	r0, r2, #31
 8001dba:	d404      	bmi.n	8001dc6 <_fflush_r+0x3a>
 8001dbc:	0599      	lsls	r1, r3, #22
 8001dbe:	d402      	bmi.n	8001dc6 <_fflush_r+0x3a>
 8001dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dc2:	f7ff faa3 	bl	800130c <__retarget_lock_acquire_recursive>
 8001dc6:	4628      	mov	r0, r5
 8001dc8:	4621      	mov	r1, r4
 8001dca:	f7ff ff59 	bl	8001c80 <__sflush_r>
 8001dce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001dd0:	07da      	lsls	r2, r3, #31
 8001dd2:	4605      	mov	r5, r0
 8001dd4:	d4e0      	bmi.n	8001d98 <_fflush_r+0xc>
 8001dd6:	89a3      	ldrh	r3, [r4, #12]
 8001dd8:	059b      	lsls	r3, r3, #22
 8001dda:	d4dd      	bmi.n	8001d98 <_fflush_r+0xc>
 8001ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dde:	f7ff fa96 	bl	800130e <__retarget_lock_release_recursive>
 8001de2:	e7d9      	b.n	8001d98 <_fflush_r+0xc>
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <_fflush_r+0x70>)
 8001de6:	429c      	cmp	r4, r3
 8001de8:	d101      	bne.n	8001dee <_fflush_r+0x62>
 8001dea:	68ac      	ldr	r4, [r5, #8]
 8001dec:	e7df      	b.n	8001dae <_fflush_r+0x22>
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <_fflush_r+0x74>)
 8001df0:	429c      	cmp	r4, r3
 8001df2:	bf08      	it	eq
 8001df4:	68ec      	ldreq	r4, [r5, #12]
 8001df6:	e7da      	b.n	8001dae <_fflush_r+0x22>
 8001df8:	08002054 	.word	0x08002054
 8001dfc:	08002074 	.word	0x08002074
 8001e00:	08002034 	.word	0x08002034

08001e04 <_lseek_r>:
 8001e04:	b538      	push	{r3, r4, r5, lr}
 8001e06:	4d07      	ldr	r5, [pc, #28]	; (8001e24 <_lseek_r+0x20>)
 8001e08:	4604      	mov	r4, r0
 8001e0a:	4608      	mov	r0, r1
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	2200      	movs	r2, #0
 8001e10:	602a      	str	r2, [r5, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	f7ff f8cc 	bl	8000fb0 <_lseek>
 8001e18:	1c43      	adds	r3, r0, #1
 8001e1a:	d102      	bne.n	8001e22 <_lseek_r+0x1e>
 8001e1c:	682b      	ldr	r3, [r5, #0]
 8001e1e:	b103      	cbz	r3, 8001e22 <_lseek_r+0x1e>
 8001e20:	6023      	str	r3, [r4, #0]
 8001e22:	bd38      	pop	{r3, r4, r5, pc}
 8001e24:	200000ec 	.word	0x200000ec

08001e28 <__swhatbuf_r>:
 8001e28:	b570      	push	{r4, r5, r6, lr}
 8001e2a:	460e      	mov	r6, r1
 8001e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e30:	2900      	cmp	r1, #0
 8001e32:	b096      	sub	sp, #88	; 0x58
 8001e34:	4614      	mov	r4, r2
 8001e36:	461d      	mov	r5, r3
 8001e38:	da08      	bge.n	8001e4c <__swhatbuf_r+0x24>
 8001e3a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	602a      	str	r2, [r5, #0]
 8001e42:	061a      	lsls	r2, r3, #24
 8001e44:	d410      	bmi.n	8001e68 <__swhatbuf_r+0x40>
 8001e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e4a:	e00e      	b.n	8001e6a <__swhatbuf_r+0x42>
 8001e4c:	466a      	mov	r2, sp
 8001e4e:	f000 f8bb 	bl	8001fc8 <_fstat_r>
 8001e52:	2800      	cmp	r0, #0
 8001e54:	dbf1      	blt.n	8001e3a <__swhatbuf_r+0x12>
 8001e56:	9a01      	ldr	r2, [sp, #4]
 8001e58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001e5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001e60:	425a      	negs	r2, r3
 8001e62:	415a      	adcs	r2, r3
 8001e64:	602a      	str	r2, [r5, #0]
 8001e66:	e7ee      	b.n	8001e46 <__swhatbuf_r+0x1e>
 8001e68:	2340      	movs	r3, #64	; 0x40
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	6023      	str	r3, [r4, #0]
 8001e6e:	b016      	add	sp, #88	; 0x58
 8001e70:	bd70      	pop	{r4, r5, r6, pc}
	...

08001e74 <__smakebuf_r>:
 8001e74:	898b      	ldrh	r3, [r1, #12]
 8001e76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e78:	079d      	lsls	r5, r3, #30
 8001e7a:	4606      	mov	r6, r0
 8001e7c:	460c      	mov	r4, r1
 8001e7e:	d507      	bpl.n	8001e90 <__smakebuf_r+0x1c>
 8001e80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001e84:	6023      	str	r3, [r4, #0]
 8001e86:	6123      	str	r3, [r4, #16]
 8001e88:	2301      	movs	r3, #1
 8001e8a:	6163      	str	r3, [r4, #20]
 8001e8c:	b002      	add	sp, #8
 8001e8e:	bd70      	pop	{r4, r5, r6, pc}
 8001e90:	ab01      	add	r3, sp, #4
 8001e92:	466a      	mov	r2, sp
 8001e94:	f7ff ffc8 	bl	8001e28 <__swhatbuf_r>
 8001e98:	9900      	ldr	r1, [sp, #0]
 8001e9a:	4605      	mov	r5, r0
 8001e9c:	4630      	mov	r0, r6
 8001e9e:	f7ff fa57 	bl	8001350 <_malloc_r>
 8001ea2:	b948      	cbnz	r0, 8001eb8 <__smakebuf_r+0x44>
 8001ea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ea8:	059a      	lsls	r2, r3, #22
 8001eaa:	d4ef      	bmi.n	8001e8c <__smakebuf_r+0x18>
 8001eac:	f023 0303 	bic.w	r3, r3, #3
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	81a3      	strh	r3, [r4, #12]
 8001eb6:	e7e3      	b.n	8001e80 <__smakebuf_r+0xc>
 8001eb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <__smakebuf_r+0x7c>)
 8001eba:	62b3      	str	r3, [r6, #40]	; 0x28
 8001ebc:	89a3      	ldrh	r3, [r4, #12]
 8001ebe:	6020      	str	r0, [r4, #0]
 8001ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ec4:	81a3      	strh	r3, [r4, #12]
 8001ec6:	9b00      	ldr	r3, [sp, #0]
 8001ec8:	6163      	str	r3, [r4, #20]
 8001eca:	9b01      	ldr	r3, [sp, #4]
 8001ecc:	6120      	str	r0, [r4, #16]
 8001ece:	b15b      	cbz	r3, 8001ee8 <__smakebuf_r+0x74>
 8001ed0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ed4:	4630      	mov	r0, r6
 8001ed6:	f000 f889 	bl	8001fec <_isatty_r>
 8001eda:	b128      	cbz	r0, 8001ee8 <__smakebuf_r+0x74>
 8001edc:	89a3      	ldrh	r3, [r4, #12]
 8001ede:	f023 0303 	bic.w	r3, r3, #3
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	81a3      	strh	r3, [r4, #12]
 8001ee8:	89a0      	ldrh	r0, [r4, #12]
 8001eea:	4305      	orrs	r5, r0
 8001eec:	81a5      	strh	r5, [r4, #12]
 8001eee:	e7cd      	b.n	8001e8c <__smakebuf_r+0x18>
 8001ef0:	08001169 	.word	0x08001169

08001ef4 <__malloc_lock>:
 8001ef4:	4801      	ldr	r0, [pc, #4]	; (8001efc <__malloc_lock+0x8>)
 8001ef6:	f7ff ba09 	b.w	800130c <__retarget_lock_acquire_recursive>
 8001efa:	bf00      	nop
 8001efc:	200000e0 	.word	0x200000e0

08001f00 <__malloc_unlock>:
 8001f00:	4801      	ldr	r0, [pc, #4]	; (8001f08 <__malloc_unlock+0x8>)
 8001f02:	f7ff ba04 	b.w	800130e <__retarget_lock_release_recursive>
 8001f06:	bf00      	nop
 8001f08:	200000e0 	.word	0x200000e0

08001f0c <_free_r>:
 8001f0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001f0e:	2900      	cmp	r1, #0
 8001f10:	d044      	beq.n	8001f9c <_free_r+0x90>
 8001f12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f16:	9001      	str	r0, [sp, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f1a1 0404 	sub.w	r4, r1, #4
 8001f1e:	bfb8      	it	lt
 8001f20:	18e4      	addlt	r4, r4, r3
 8001f22:	f7ff ffe7 	bl	8001ef4 <__malloc_lock>
 8001f26:	4a1e      	ldr	r2, [pc, #120]	; (8001fa0 <_free_r+0x94>)
 8001f28:	9801      	ldr	r0, [sp, #4]
 8001f2a:	6813      	ldr	r3, [r2, #0]
 8001f2c:	b933      	cbnz	r3, 8001f3c <_free_r+0x30>
 8001f2e:	6063      	str	r3, [r4, #4]
 8001f30:	6014      	str	r4, [r2, #0]
 8001f32:	b003      	add	sp, #12
 8001f34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001f38:	f7ff bfe2 	b.w	8001f00 <__malloc_unlock>
 8001f3c:	42a3      	cmp	r3, r4
 8001f3e:	d908      	bls.n	8001f52 <_free_r+0x46>
 8001f40:	6825      	ldr	r5, [r4, #0]
 8001f42:	1961      	adds	r1, r4, r5
 8001f44:	428b      	cmp	r3, r1
 8001f46:	bf01      	itttt	eq
 8001f48:	6819      	ldreq	r1, [r3, #0]
 8001f4a:	685b      	ldreq	r3, [r3, #4]
 8001f4c:	1949      	addeq	r1, r1, r5
 8001f4e:	6021      	streq	r1, [r4, #0]
 8001f50:	e7ed      	b.n	8001f2e <_free_r+0x22>
 8001f52:	461a      	mov	r2, r3
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	b10b      	cbz	r3, 8001f5c <_free_r+0x50>
 8001f58:	42a3      	cmp	r3, r4
 8001f5a:	d9fa      	bls.n	8001f52 <_free_r+0x46>
 8001f5c:	6811      	ldr	r1, [r2, #0]
 8001f5e:	1855      	adds	r5, r2, r1
 8001f60:	42a5      	cmp	r5, r4
 8001f62:	d10b      	bne.n	8001f7c <_free_r+0x70>
 8001f64:	6824      	ldr	r4, [r4, #0]
 8001f66:	4421      	add	r1, r4
 8001f68:	1854      	adds	r4, r2, r1
 8001f6a:	42a3      	cmp	r3, r4
 8001f6c:	6011      	str	r1, [r2, #0]
 8001f6e:	d1e0      	bne.n	8001f32 <_free_r+0x26>
 8001f70:	681c      	ldr	r4, [r3, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	6053      	str	r3, [r2, #4]
 8001f76:	4421      	add	r1, r4
 8001f78:	6011      	str	r1, [r2, #0]
 8001f7a:	e7da      	b.n	8001f32 <_free_r+0x26>
 8001f7c:	d902      	bls.n	8001f84 <_free_r+0x78>
 8001f7e:	230c      	movs	r3, #12
 8001f80:	6003      	str	r3, [r0, #0]
 8001f82:	e7d6      	b.n	8001f32 <_free_r+0x26>
 8001f84:	6825      	ldr	r5, [r4, #0]
 8001f86:	1961      	adds	r1, r4, r5
 8001f88:	428b      	cmp	r3, r1
 8001f8a:	bf04      	itt	eq
 8001f8c:	6819      	ldreq	r1, [r3, #0]
 8001f8e:	685b      	ldreq	r3, [r3, #4]
 8001f90:	6063      	str	r3, [r4, #4]
 8001f92:	bf04      	itt	eq
 8001f94:	1949      	addeq	r1, r1, r5
 8001f96:	6021      	streq	r1, [r4, #0]
 8001f98:	6054      	str	r4, [r2, #4]
 8001f9a:	e7ca      	b.n	8001f32 <_free_r+0x26>
 8001f9c:	b003      	add	sp, #12
 8001f9e:	bd30      	pop	{r4, r5, pc}
 8001fa0:	200000e4 	.word	0x200000e4

08001fa4 <_read_r>:
 8001fa4:	b538      	push	{r3, r4, r5, lr}
 8001fa6:	4d07      	ldr	r5, [pc, #28]	; (8001fc4 <_read_r+0x20>)
 8001fa8:	4604      	mov	r4, r0
 8001faa:	4608      	mov	r0, r1
 8001fac:	4611      	mov	r1, r2
 8001fae:	2200      	movs	r2, #0
 8001fb0:	602a      	str	r2, [r5, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	f7fe ff9c 	bl	8000ef0 <_read>
 8001fb8:	1c43      	adds	r3, r0, #1
 8001fba:	d102      	bne.n	8001fc2 <_read_r+0x1e>
 8001fbc:	682b      	ldr	r3, [r5, #0]
 8001fbe:	b103      	cbz	r3, 8001fc2 <_read_r+0x1e>
 8001fc0:	6023      	str	r3, [r4, #0]
 8001fc2:	bd38      	pop	{r3, r4, r5, pc}
 8001fc4:	200000ec 	.word	0x200000ec

08001fc8 <_fstat_r>:
 8001fc8:	b538      	push	{r3, r4, r5, lr}
 8001fca:	4d07      	ldr	r5, [pc, #28]	; (8001fe8 <_fstat_r+0x20>)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	4604      	mov	r4, r0
 8001fd0:	4608      	mov	r0, r1
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	602b      	str	r3, [r5, #0]
 8001fd6:	f7fe ffd0 	bl	8000f7a <_fstat>
 8001fda:	1c43      	adds	r3, r0, #1
 8001fdc:	d102      	bne.n	8001fe4 <_fstat_r+0x1c>
 8001fde:	682b      	ldr	r3, [r5, #0]
 8001fe0:	b103      	cbz	r3, 8001fe4 <_fstat_r+0x1c>
 8001fe2:	6023      	str	r3, [r4, #0]
 8001fe4:	bd38      	pop	{r3, r4, r5, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200000ec 	.word	0x200000ec

08001fec <_isatty_r>:
 8001fec:	b538      	push	{r3, r4, r5, lr}
 8001fee:	4d06      	ldr	r5, [pc, #24]	; (8002008 <_isatty_r+0x1c>)
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	4604      	mov	r4, r0
 8001ff4:	4608      	mov	r0, r1
 8001ff6:	602b      	str	r3, [r5, #0]
 8001ff8:	f7fe ffcf 	bl	8000f9a <_isatty>
 8001ffc:	1c43      	adds	r3, r0, #1
 8001ffe:	d102      	bne.n	8002006 <_isatty_r+0x1a>
 8002000:	682b      	ldr	r3, [r5, #0]
 8002002:	b103      	cbz	r3, 8002006 <_isatty_r+0x1a>
 8002004:	6023      	str	r3, [r4, #0]
 8002006:	bd38      	pop	{r3, r4, r5, pc}
 8002008:	200000ec 	.word	0x200000ec

0800200c <_init>:
 800200c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800200e:	bf00      	nop
 8002010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002012:	bc08      	pop	{r3}
 8002014:	469e      	mov	lr, r3
 8002016:	4770      	bx	lr

08002018 <_fini>:
 8002018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800201a:	bf00      	nop
 800201c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800201e:	bc08      	pop	{r3}
 8002020:	469e      	mov	lr, r3
 8002022:	4770      	bx	lr
